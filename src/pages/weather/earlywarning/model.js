import reducers from '@/app/reducers';import {context, IO} from '@/app/io';//配置接口参数context.create('earlyWarningList', {    listByPagedata: {        mockUrl: '/proxy/workWeatherWarning/listByPage',        method: 'POST',        url: '/workWeatherWarning/listByPage'    },    listByPagedataSecond: {        mockUrl: '/proxy/workWeatherWarningHistory/listByPage',        method: 'POST',        url: '/workWeatherWarningHistory/listByPage'    },    updateWarning: {        mockUrl: '/proxy/workWeatherWarning/update',        url: '/workWeatherWarning/update',        method: 'POST'    },    deleteWarning: {        mockUrl: '/proxy/workWeatherWarning/delete',        url: '/workWeatherWarning/delete',        method: 'GET'    },    getOneWarning: {        mockUrl: '/proxy/workWeatherWarning/getById',        url: '/workWeatherWarning/getById',        method: 'GET'    },    Adddata: {        mockUrl: '/proxy/resource/add',        method: 'POST'    },    deleteData: {        mockUrl: '/proxy/resource/delete/:id',        rest: true    },    Modifydata: {        mockUrl: '/proxy/resource/update',        method: 'POST'    },    TreeData: {        mockUrl: '/proxy/resource/getChildsById',        rest: true    },    getAllBase: {        mockUrl: '/proxy/astBase/listAll',        url:'/astBase/listAll',        method:'GET',        rest:true    },    AddWarning: {        mockUrl: '/proxy/workWeatherWarning/add',        url: '/workWeatherWarning/add',        method: 'POST'    },    GetAllCrop: {        mockUrl: '/proxy/astCrop/listAll',        url: '/astCrop/listAll',        method: 'GET',        rest: true    }});//封装页面reducer、actionconst farmingModel = {    reducer: (defaultState = {        Alldate: [],        Alldata: [],        total: 0,        totalS: 0,        parentname: null,        PID: null,        Psize: 10,        Psize_S: 10,        Cur: 1,        Cur_S: 1,        fields: {},        TreeD: [],        addflag: false,        modalflag: false,        modaltype: '',        parentID: null,        slideID: -1,        modifyID: null,        chooseCUR: 1,        chooseSIZE: 10,        slideparentID: -1,        slideName: '资源',        periodArr: [],        cropDicList: [],        cropPeriodList: [],        baseList: []    }, action) => {        const fields = action.data;        switch (action.type) {            case 'EARLY_WARN_ALL_DATA': {                const Alldate = action.dataAll;                const total = action.total;                return Object.assign({}, defaultState, {                    Alldate: Alldate,                    total: total,                    chooseflag: false                });            }            case 'EARLY_WARN_ALL_DATA_SECOND': {                const Alldata = action.dataAll;                const total = action.total;                return Object.assign({}, defaultState, {                    Alldata: Alldata,                    totalS: total,                    chooseflag: false                });            }            case 'EARLY_WARN_QUERY_ALL': {                const queryAlls = action.queryall;                const querytotal = action.querytotal;                return Object.assign({}, defaultState, {                    Alldate: queryAlls,                    total: querytotal                });            }            case 'EARLY_WARN_MENU_ALL':                return Object.assign({}, defaultState, {                    Alldate: action.arr,                    total: action.num                    //chooseflag:true                });//        case 'EARLY_WARN_CHOOSE_ALL': {//          const chooseAlls = action.chooseall;//          const choosetotal = action.choosetotal;//          return Object.assign({}, defaultState, {//            Alldate:chooseAlls,//            total:choosetotal//          });//        }            case 'EARLY_WARN_SUPERIOR_NAME':                return Object.assign({}, defaultState, {                    parentname: action.Name                });            case 'EARLY_WARN_RES_PAGE':                return Object.assign({}, defaultState, {                    Cur: action.cur,                    Psize: action.psize                });            case 'EARLY_WARN_RES_PAGE_SECOND':                return Object.assign({}, defaultState, {                    Cur_S: action.cur,                    Psize_S: action.psize                });            case 'EARLY_WARN_MODAL':                return Object.assign({}, defaultState, {                    modalflag: action.modalflag,                    modaltype: action.modaltype                });            case 'EARLY_WARN_DEFAULTFIELD':                return Object.assign({}, defaultState, {fields: fields});            case 'EARLY_WARN_TREE_DATAs':                return Object.assign({}, defaultState, {                    TreeD: action.tree                });            case 'EARLY_WARN_SLIDEID':                return Object.assign({}, defaultState, {                    slideID: action.num,                    slideName: action.slideName,                    slideparentID: action.slideparentID                });            case 'EARLY_WARN_PARENTID':                return Object.assign({}, defaultState, {                    parentID: action.parentid,                    modifyID: action.modifyid                });            case 'EARLY_WARN_CHOOSEPAGE':                return Object.assign({}, defaultState, {                    chooseCUR: action.chooseCUR,                    chooseSIZE: action.chooseSIZE                });            case 'PLAN_ALL_CROP_DIC': {                const dicAll = action.dataAll;                return Object.assign({}, defaultState, {                    cropDicList: dicAll                });            }            case 'PLAN_ALL_CROP_PERIOD': {                const dicAll = action.dataAll;                return Object.assign({}, defaultState, {                    periodArr: dicAll.astCropPeriods                });            }            case 'PLAN_ALL_CROP_BASE': {                const dicAll = action.dataAll;                return Object.assign({}, defaultState, {                    baseList: dicAll                });            }        }        return defaultState;    },    action: (dispatch) => {        return {            superiorName: (parent) => {  //点击左边树的数据                dispatch({                    type: "EARLY_WARN_SUPERIOR_NAME",                    Name: parent.name,                    parentid: parent.parentID,                    pID: parent.parentLeftID                });            },            //    查询            Alldatas: (page) => {  //进入页面的列表数据                IO.earlyWarningList.listByPagedata(page).then((res) => {                    const data = res.data.rows || [];                    const total = res.data.total;                    const dataAll = data.map((item) => {                        if (item.stauts === 0) {                            return Object.assign({}, item, {                                stauts: '正常'                            });                        } else if (item.stauts === 1) {                            return Object.assign({}, item, {                                stauts: '禁用'                            });                        } else {                            return item;                        }                    });                    dispatch({                        type: "EARLY_WARN_ALL_DATA",                        dataAll,                        total                    });                }).catch();            },            //    查询            AlldatasS: (page) => {  //进入页面的列表数据                IO.earlyWarningList.listByPagedataSecond(page).then((res) => {                    const data = res.data.rows || [];                    const total = res.data.total;                    const dataAll = data.map((item) => {                        if (item.stauts === 0) {                            return Object.assign({}, item, {                                stauts: '正常'                            });                        } else if (item.stauts === 1) {                            return Object.assign({}, item, {                                stauts: '禁用'                            });                        } else {                            return item;                        }                    });                    dispatch({                        type: "EARLY_WARN_ALL_DATA_SECOND",                        dataAll,                        total                    });                }).catch();            },            queryAll: (req) => {  //筛选的列表数据                IO.earlyWarningList.listByPagedata(req).then((res) => {                    const querytotal = res.data.total;                    const data = res.data.rows;                    const queryall = data.map((item) => {                        if (item.stauts === 0) {                            return Object.assign({}, item, {                                stauts: '正常'                            });                        } else if (item.stauts === 1) {                            return Object.assign({}, item, {                                stauts: '禁用'                            });                        } else {                            return item;                        }                    });                    dispatch({                        type: "EARLY_WARN_QUERY_ALL",                        queryall,                        querytotal                    });                }).catch();            },            page: (obj) => {  //分页页码                dispatch({                    type: "EARLY_WARN_RES_PAGE",                    cur: obj.current,                    psize: obj.pageSize                });            },            pageSecond: (obj) => {  //分页页码                dispatch({                    type: "EARLY_WARN_RES_PAGE_SECOND",                    cur: obj.current,                    psize: obj.pageSize                });            },            choosepage: (obj) => {                dispatch({                    type: "EARLY_WARN_CHOOSEPAGE",                    chooseCUR: obj.current,                    chooseSIZE: obj.pageSize                });            },            // 创建            defaultFields: (data) => {  //弹出框的数据                dispatch({                    type: "EARLY_WARN_DEFAULTFIELD",                    data                });            },            modal: (obj) => {  //弹出框是否显示                dispatch({                    type: "EARLY_WARN_MODAL",                    modalflag: obj.modalFlag,                    modaltype: obj.modeltype                });            },            getAllDic: () => {                IO.earlyWarningList.GetAllCrop({companyId: 1}).then((res) => {                    const data = res.data || [];                    dispatch({                        type: "PLAN_ALL_CROP_DIC",                        dataAll: data                    });                });            },            getCompanyBase: () => {                IO.earlyWarningList.getAllBase({companyId: 1}).then((res) => {                    const data = res.data || [];                    dispatch({                        type: "PLAN_ALL_CROP_BASE",                        dataAll: data                    });                });            },            getAllPeriod: (value) => {                IO.programAdd.listCycleData({':id': value}).then((res) => {                    const data = res.data || [];                    dispatch({                        type: "PLAN_ALL_CROP_PERIOD",                        dataAll: data                    });                });            }        };    }};reducers.assemble = {earlyWarningListReducer: farmingModel.reducer};const action = farmingModel.action;const IOModel = {    TreeMOdel: IO.earlyWarningList.TreeData,    Delete: IO.earlyWarningList.deleteData,    Adddata: IO.earlyWarningList.Adddata,    Modifydata: IO.earlyWarningList.Modifydata,    getAllBase: IO.earlyWarningList.getAllBase,    AddWarning: IO.earlyWarningList.AddWarning,    CreateWarning: IO.earlyWarningList.Modifydata,    updateWarning: IO.earlyWarningList.updateWarning,    deleteWarning: IO.earlyWarningList.deleteWarning,    getOneWarning: IO.earlyWarningList.getOneWarning};export {    action,    IO,    IOModel};