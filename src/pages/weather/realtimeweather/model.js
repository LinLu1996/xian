import reducers from '@/app/reducers';import {context, IO} from '@/app/io';//配置接口参数context.create('analyze', {    listByPagedata: {        mockUrl: '/proxy/astBase/listByPage',        url: '/astBase/listByPage',        method: 'POST'    },    GetOne: {        mockUrl: '../../../mock/farming/analyze.json',        method: 'GET',        rest: true    },    getWeatherHistoryByBaseId: {        mockUrl: '/proxy/workWeatherHistory/getWeatherHistoryByBaseId/:baseId',        url: '/workWeatherHistory/getWeatherHistoryByBaseId/:baseId',        method: 'GET',        rest: true    },    weatherTwentyFourHours: {        mockUrl: '/proxy/workWeatherHistory/weatherTwentyFourHours/:baseId',        url: '/workWeatherHistory/weatherTwentyFourHours/:baseId',        method: 'GET',        rest: true    },    GetOneTest: {        mockUrl: '../../../mock/farming/analyzeOther.json',        method: 'GET',        rest: true    },    GetAllDic: {        mockUrl: '/proxy/astLand/baseByCompanyId',        url: '/astLand/baseByCompanyId',        method: 'GET',        rest: true    },    GetFifteenDayWeather: {        mockUrl: '/proxy/workWeatherHistory/workWeatherFifteenDay/:baseId',        url: '/workWeatherHistory/workWeatherFifteenDay/:baseId',        method: 'GET',        rest: true    }});//封装页面reducer、actionconst farmingModel = {    reducer: (defaultState = {        Alldate: [],        Alldic: [],        total: null,        parentname: null,        PID: null,        Psize: 10,        Cur: 1,        fields: {},        TreeD: [],        addflag: false,        modaltype: '',        parentID: null,        slideID: -1,        modifyID: null,        chooseCUR: 1,        chooseSIZE: 10,        slideparentID: -1,        slideName: '分析'    }, action) => {        const fields = action.data;        switch (action.type) {            case 'RES_ALL_DIC': {                const dicAll = action.dataAll;                return Object.assign({}, defaultState, {                    Alldic: dicAll                });            }            case 'BASE_ALL_DATA': {                const Alldate = action.data;                const total = action.total;                return Object.assign({}, defaultState, {                    Alldate: Alldate,                    total: total,                    chooseflag: false                });            }            case 'BASE_QUERY_ALL': {                const queryAlls = action.data;                const querytotal = action.querytotal;                return Object.assign({}, defaultState, {                    Alldate: queryAlls,                    total: querytotal                });            }            case 'BASE_MENU_ALL':                return Object.assign({}, defaultState, {                    Alldate: action.arr,                    total: action.num                    //chooseflag:true                });            case 'BASE_SUPERIOR_NAME':                return Object.assign({}, defaultState, {                    parentname: action.Name                });            case 'BASE_RES_PAGE':                return Object.assign({}, defaultState, {                    Cur: action.cur,                    Psize: action.psize                });            case 'BASE_DEFAULTFIELD':                return Object.assign({}, defaultState, {fields: fields});            case 'BASE_TREE_DATAs':                return Object.assign({}, defaultState, {                    TreeD: action.tree                });            case 'BASE_PARENTID':                return Object.assign({}, defaultState, {                    parentID: action.parentid,                    modifyID: action.modifyid                });            case 'BASE_CHOOSEPAGE':                return Object.assign({}, defaultState, {                    chooseCUR: action.chooseCUR,                    chooseSIZE: action.chooseSIZE                });        }        return defaultState;    },    action: (dispatch) => {        return {            AllDicPull: () => {                IO.analyze.GetAllDic({companyId:1}).then((res) => {                    const data = res.data || {};                    dispatch({                        type: "RES_ALL_DIC",                        dataAll: data                    });                }).catch();            },            superiorName: (parent) => {  //点击左边树的数据                dispatch({                    type: "BASE_SUPERIOR_NAME",                    Name: parent.name,                    parentid: parent.parentID,                    pID: parent.parentLeftID                });            },            //    查询            Alldatas: (page) => {  //进入页面的列表数据                page.companyId = 1;                page.userId = 1;                page.desc = 0;                page.field = "name";                IO.base.listByPagedata(page).then((res) => {                    const data = res.data.rows || [];                    const total = res.data.total;                    dispatch({                        type: "BASE_ALL_DATA",                        data,                        total                    });                }).catch();            },            queryAll: (req) => {  //筛选的列表数据                req.companyId = 1;                req.userId = 1;                req.desc = 0;                req.field = "name";                IO.base.listByPagedata(req).then((res) => {                    const querytotal = res.data.total;                    const data = res.data.rows;                    dispatch({                        type: "BASE_QUERY_ALL",                        data,                        querytotal                    });                }).catch();            },            page: (obj) => {  //分页页码                dispatch({                    type: "BASE_RES_PAGE",                    cur: obj.current,                    psize: obj.pageSize                });            },            choosepage: (obj) => {                dispatch({                    type: "BASE_CHOOSEPAGE",                    chooseCUR: obj.current,                    chooseSIZE: obj.pageSize                });            }        };    }};reducers.assemble = {analyzeReducer: farmingModel.reducer};const action = farmingModel.action;const IOModel = {    GetOne: IO.analyze.GetOne,    GetOneTest: IO.analyze.GetOneTest,    getWeatherHistoryByBaseId: IO.analyze.getWeatherHistoryByBaseId,    weatherTwentyFourHours: IO.analyze.weatherTwentyFourHours,    GetFifteenDayWeather: IO.analyze.GetFifteenDayWeather};export {    action,    IO,    IOModel};