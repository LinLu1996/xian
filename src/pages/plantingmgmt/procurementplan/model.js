import reducers from '@/app/reducers';import {context, IO} from '@/app/io';//配置接口参数context.create('procurementPlan', {    listByPagedata: {        mockUrl: '/proxy/workProcurement/getWaitPurchase',        url: '/workProcurement/getWaitPurchase',        method: 'POST'    },    listByPageProcurement: {        mockUrl: '/proxy/workProcurement/listByPage',        url: '/workProcurement/listByPage',        method: 'POST'    },    GetAllStatus: {        mockUrl: '/proxy/workProcurement/getStatus',        url: '/workProcurement/getStatus',        method: 'GET',        rest: true    },    Adddata: {        mockUrl: '/proxy/workProcurement/add',        url: '/workProcurement/add',        method: 'POST'    },    Modifydata: {        mockUrl: '/proxy/workProcurement/update',        method: 'POST'    },    TreeData: {        mockUrl: '/proxy/resource/getChildsById',        rest: true    },    AddMaterials: {        mockUrl: '/proxy/workProcurementMaterials/addMaterials',        url: '/workProcurementMaterials/addMaterials',        method: 'POST'    },    GetOne: {        mockUrl: '/proxy/workProcurement/getById/:id',        url: '/workProcurement/getById/:id',        method: 'GET',        rest: true    },    GetChild: {        mockUrl: '/proxy/workProcurement/getTaskByMaterialsId',        url: '/workProcurement/getTaskByMaterialsId',        method: 'POST'    },    listByPageWaitData: {        mockUrl: '/proxy/workProcurement/getWaitPurchase',        url: '/workProcurement/getWaitPurchase',        method: 'POST'    },    deleteData: {        mockUrl: '/proxy/workProcurement/delete',        url: '/workProcurement/delete',        method: 'GET'    },    ModifyProcurement: {        mockUrl: '/proxy/workProcurementMaterials/updateMaterials',        url: '/workProcurementMaterials/updateMaterials',        method: 'POST'    },    complete: {        mockUrl: '/proxy/workProcurement/compelet/:id',        url: '/workProcurement/compelet/:id',        method: 'GET',        rest: true    },    cancel: {        mockUrl: '/proxy/workProcurement/cancleProcurement/:id',        url: '/workProcurement/cancleProcurement/:id',        method: 'GET',        rest: true    }});//封装页面reducer、actionconst farmingModel = {    reducer: (defaultState = {        Alldate: [],        total: null,        AlldataPro: [],        totalPro: 0,        parentname: null,        PID: null,        Psize: 10,        Cur: 1,        fields: {},        TreeD: [],        statusDic: [],        addflag: false,        modalflag: false,        modalflagDetails: false,        modaltype: '',        parentID: null,        slideID: -1,        modifyID: null,        chooseCUR: 1,        chooseSIZE: 10,        slideparentID: -1,        slideName: '资源',        AllWaitData: [],        childData: [],        detailData: {},        user: ''    }, action) => {        const fields = action.data;        switch (action.type) {            case 'PROPLAN_ALL_DATA': {                const Alldate = action.dataAll;                const total = action.total;                return Object.assign({}, defaultState, {                    Alldate: Alldate,                    total: total,                    chooseflag: false                });            }            case 'PROPLAN_QUERY_ALL': {                const queryAlls = action.queryall;                const querytotal = action.querytotal;                return Object.assign({}, defaultState, {                    Alldate: queryAlls,                    total: querytotal                });            }            case 'PROPLAN_QUERY_ALL_PROPLAN': {                const queryAlls = action.data;                const querytotal = action.querytotal;                const user = action.user;                return Object.assign({}, defaultState, {                    //AlldataPro:queryAlls,                    AlldataPro: queryAlls,                    totalPro: querytotal,                    user: user                });            }            case 'PROPLAN_MENU_ALL':                return Object.assign({}, defaultState, {                    Alldate: action.arr,                    total: action.num                    //chooseflag:true                });//        case 'PROPLAN_CHOOSE_ALL': {//          const chooseAlls = action.chooseall;//          const choosetotal = action.choosetotal;//          return Object.assign({}, defaultState, {//            Alldate:chooseAlls,//            total:choosetotal//          });//        }            case 'PROPLAN_SUPERIOR_NAME':                return Object.assign({}, defaultState, {                    parentname: action.Name                });            case 'PROPLAN_RES_PAGE':                return Object.assign({}, defaultState, {                    Cur: action.cur,                    Psize: action.psize                });            case 'PROPLAN_MODAL':                return Object.assign({}, defaultState, {                    modalflag: action.modalflag,                    modaltype: action.modaltype                });            case 'PROPLAN_MODAL_DETAILS':                return Object.assign({}, defaultState, {                    modalflagDetails: action.modalflagDetails,                    modaltype: action.modaltype                });            case 'PROPLAN_DEFAULTFIELD':                return Object.assign({}, defaultState, {fields: fields});            case 'PROPLAN_TREE_DATAs':                return Object.assign({}, defaultState, {                    TreeD: action.tree                });            case 'PROPLAN_SLIDEID':                return Object.assign({}, defaultState, {                    slideID: action.num,                    slideName: action.slideName,                    slideparentID: action.slideparentID                });            case 'PROPLAN_PARENTID':                return Object.assign({}, defaultState, {                    parentID: action.parentid,                    modifyID: action.modifyid                });            case 'PROPLAN_CHOOSEPAGE':                return Object.assign({}, defaultState, {                    chooseCUR: action.chooseCUR,                    chooseSIZE: action.chooseSIZE                });            case 'PROPLAN_ALL_STATUS_DIC':                return Object.assign({}, defaultState, {                    statusDic: action.dataAll                });            case 'PROPLANDETAIL_ONE_DATA': {                const data = action.data;                return Object.assign({}, defaultState, {                    detailData: data                });            }            case 'PROPLANDETAIL_CHILD_DATA': {                const data = action.data;                return Object.assign({}, defaultState, {                    childData: data                });            }            case 'PROPLANDETAIL_MODAL_DETAILS':                return Object.assign({}, defaultState, {                    modalflagDetails: action.modalflagDetails,                    modaltype: action.modaltype                });            case 'PROPLANDETAIL_DEFAULTFIELD':                return Object.assign({}, defaultState, {fields: fields});            case 'PROPLANDETAIL_TREE_DATAs':                return Object.assign({}, defaultState, {                    TreeD: action.tree                });            case 'PROPLANDETAIL_SLIDEID':                return Object.assign({}, defaultState, {                    slideID: action.num,                    slideName: action.slideName,                    slideparentID: action.slideparentID                });            case 'PROPLANDETAIL_PARENTID':                return Object.assign({}, defaultState, {                    parentID: action.parentid,                    modifyID: action.modifyid                });            case 'PROPLANDETAIL_CHOOSEPAGE':                return Object.assign({}, defaultState, {                    chooseCUR: action.chooseCUR,                    chooseSIZE: action.chooseSIZE                });            case 'PROPLANDETAIL_ALL_WAIT_DATA': {                const Alldate = action.dataAll;                return Object.assign({}, defaultState, {                    AllWaitData: Alldate                });            }            case 'PROPLANDETAIL_ALL_STATUS_DIC':                return Object.assign({}, defaultState, {                    statusDic: action.dataAll                });        }        return defaultState;    },    action: (dispatch) => {        return {            superiorName: (parent) => {  //点击左边树的数据                dispatch({                    type: "PROPLAN_SUPERIOR_NAME",                    Name: parent.name,                    parentid: parent.parentID,                    pID: parent.parentLeftID                });            },            //    查询            Alldatas: (page) => {  //进入页面的列表数据                IO.procurementPlan.listByPagedata(page).then((res) => {                    const data = res.data.rows || [];                    const total = res.data.total;                    const dataAll = data.map((item) => {                        if (item.stauts === 0) {                            return Object.assign({}, item, {                                stauts: '正常'                            });                        } else if (item.stauts === 1) {                            return Object.assign({}, item, {                                stauts: '禁用'                            });                        } else {                            return item;                        }                    });                    dispatch({                        type: "PROPLAN_ALL_DATA",                        dataAll,                        total                    });                }).catch();            },            queryAll: (req) => {  //筛选的列表数据                IO.procurementPlan.listByPagedata(req).then((res) => {                    const querytotal = res.data.total;                    const data = res.data.rows;                    const queryall = data.map((item) => {                        if (item.stauts === 0) {                            return Object.assign({}, item, {                                stautsShow: '正常'                            });                        } else if (item.stauts === 1) {                            return Object.assign({}, item, {                                stautsShow: '禁用'                            });                        } else {                            return item;                        }                    });                    dispatch({                        type: "PROPLAN_QUERY_ALL",                        queryall,                        querytotal                    });                }).catch();            },            queryAllProcurement: (req) => {  //筛选的列表数据                IO.procurementPlan.listByPageProcurement(req).then((res) => {                    const querytotal = res.data.total;                    const data = res.data.rows;                    const user = res.data.user;                    dispatch({                        type: "PROPLAN_QUERY_ALL_PROPLAN",                        data,                        querytotal,                        user                    });                }).catch();            },            AllStatusQuery: () => {                IO.procurementPlan.GetAllStatus().then((res) => {                    const data = res.data || {};                    dispatch({                        type: "PROPLAN_ALL_STATUS_DIC",                        dataAll: data                    });                }).catch();            },            page: (obj) => {  //分页页码                dispatch({                    type: "PROPLAN_RES_PAGE",                    cur: obj.current,                    psize: obj.pageSize                });            },            choosepage: (obj) => {                dispatch({                    type: "PROPLAN_CHOOSEPAGE",                    chooseCUR: obj.current,                    chooseSIZE: obj.pageSize                });            },            // 创建            defaultFields: (data) => {  //弹出框的数据                dispatch({                    type: "PROPLAN_DEFAULTFIELD",                    data                });            },            modal: (obj) => {  //弹出框是否显示                dispatch({                    type: "PROPLAN_MODAL",                    modalflag: obj.modalFlag,                    modaltype: obj.modeltype                });            },            modalDetails: (obj) => {  //弹出框是否显示                dispatch({                    type: "PROPLAN_MODAL_DETAILS",                    modalflagDetails: obj.modalFlagDetails,                    modaltype: obj.modeltype                });            },            queryAllWait: (req) => {  //筛选的列表数据                IO.procurementPlan.listByPageWaitData(req).then((res) => {                    const data = res.data.rows;                    const queryall = data.map((item) => {                        if (item.stauts === 0) {                            return Object.assign({}, item, {                                stautsShow: '正常'                            });                        } else if (item.stauts === 1) {                            return Object.assign({}, item, {                                stautsShow: '禁用'                            });                        } else {                            return item;                        }                    });                    dispatch({                        type: "PROPLANDETAIL_ALL_WAIT_DATA",                        dataAll: queryall                    });                }).catch();            },            GetOne: async (page) => {  //进入页面的列表数据                await IO.procurementPlan.GetOne(page).then((res) => {                    const data = res.data || {};                    dispatch({                        type: "PROPLANDETAIL_ONE_DATA",                        data                    });                }).catch();            },            GetChild: async (page) => {  //进入页面的列表数据                await IO.procurementPlan.GetChild(page).then((res) => {                    const data = res.data || {};                    dispatch({                        type: "PROPLANDETAIL_CHILD_DATA",                        data                    });                }).catch();            },            AllWaitDatas: (page) => {  //进入页面的列表数据                IO.procurementPlan.listByPageWaitData(page).then((res) => {                    const data = res.data.rows || [];                    const total = res.data.total;                    const dataAll = data.map((item) => {                        if (item.stauts === 0) {                            return Object.assign({}, item, {                                stauts: '正常'                            });                        } else if (item.stauts === 1) {                            return Object.assign({}, item, {                                stauts: '禁用'                            });                        } else {                            return item;                        }                    });                    dispatch({                        type: "PROPLANDETAIL_ALL_WAIT_DATA",                        dataAll,                        total                    });                }).catch();            }        };    }};reducers.assemble = {procurementplanReducer: farmingModel.reducer};const action = farmingModel.action;const IOModel = {    TreeMOdel: IO.procurementPlan.TreeData,    Adddata: IO.procurementPlan.Adddata,    Modifydata: IO.procurementPlan.Modifydata,    GetAllStatus: IO.procurementPlan.GetAllStatus,    GetChild: IO.procurementPlan.GetChild,    Delete: IO.procurementPlan.deleteData,    AddMaterials: IO.procurementPlan.AddMaterials,    ModifyProcurement: IO.procurementPlan.ModifyProcurement,    complete: IO.procurementPlan.complete,    cancel: IO.procurementPlan.cancel};export {    action,    IO,    IOModel};