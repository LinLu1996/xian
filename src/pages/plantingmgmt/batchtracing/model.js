import reducers from '@/app/reducers';import {context, IO} from '@/app/io';//配置接口参数context.create('batchTracing', {  listByPagedata: {      mockUrl: '/proxy/workBatch/listByPage',      url: '/workBatch/listByPage',      method: 'POST'  },  Adddata: {    mockUrl: '/proxy/resource/add',    method: 'POST'  },  deleteData: {    mockUrl: '/proxy/resource/delete/:id',    rest: true  },  Modifydata: {    mockUrl: '/proxy/resource/update',    method: 'POST'  },  TreeData: {    mockUrl: '/proxy/resource/getChildsById',    rest: true  },  UniqueCodeByBatch: {    mockUrl: 'farming/uniqueCode.json',    url: ''  },  getChildLevel: {      mockUrl: '/proxy/workGradeBatch/getBatchByBatchId/:batchId',      url: '/workGradeBatch/getBatchByBatchId/:batchId',      method: 'GET',      rest: true  },    addBatchGrade: {        mockUrl: '/proxy/workGradeBatch/addList',        url: '/workGradeBatch/addList',        method: 'POST'    },    deleteBatchGrade: {        mockUrl: '/proxy/workGradeBatch/updateListByDelete',        url: '/workGradeBatch/updateListByDelete',        method: 'POST'    },    //保存分级数量    saveBatchGradeQty: {        mockUrl: '/proxy/workGradeBatch/updateList',        url: '/workGradeBatch/updateList',        method: 'POST'    },    //生成二维码    addQrCode: {        mockUrl: '/proxy/workQrcode/add',        url: '/workQrcode/add',        method: 'POST'    },    //查看码库    getQrcodeList: {        mockUrl: '/proxy/workTask/searchUniqueQrcode',        url: '/workTask/searchUniqueQrcode',        method: 'POST'    }});//封装页面reducer、actionconst farmingModel = {  reducer: (defaultState = {    Data2: {},    Alldate:[],    total:null,    parentname:null,    PID:null,    Psize:10,    Cur:1,    fields:{},    TreeD:[],    addflag:false,    modalflag:false,    codeflag: false,    modalflagDetails:false,    modaltype:'',    parentID:null,    slideID:-1,    modifyID:null,    chooseCUR:1,    chooseSIZE:10,    slideparentID:-1,    slideName:'资源'  }, action) => {    const fields = action.data;    switch (action.type) {      case 'BATCH_TRACING_ALL_DATA': {        const Alldate = action.dataAll;        const total = action.total;        return Object.assign({}, defaultState, {          Alldate:Alldate,          total:total,          chooseflag:false        });      }        case 'BATCH_TRACING_QUERY_ALL': {          const queryAlls = action.queryall;          const querytotal = action.querytotal;          return Object.assign({}, defaultState, {            Alldate:queryAlls,            total:querytotal          });        }        case 'BATCH_UNIQUE_CODE_ALL': {          const queryAlls = action.data;          const querytotal = action.querytotal;          return Object.assign({}, defaultState, {            Alldate:queryAlls,            total:querytotal          });        }        case 'BATCH_TRACING_MENU_ALL':        return Object.assign({}, defaultState, {          Alldate:action.arr,          total:action.num          //chooseflag:true        });//        case 'BATCH_TRACING_CHOOSE_ALL': {//          const chooseAlls = action.chooseall;//          const choosetotal = action.choosetotal;//          return Object.assign({}, defaultState, {//            Alldate:chooseAlls,//            total:choosetotal//          });//        }        case 'BATCH_TRACING_SUPERIOR_NAME':        return Object.assign({}, defaultState, {          parentname:action.Name        });        case 'BATCH_TRACING_CHANGE':        return Object.assign({}, defaultState, {          Data2:action.data        });        case 'BATCH_TRACING_PAGE':        return Object.assign({}, defaultState, {          Cur:action.cur,          Psize:action.psize        });          case 'BATCH_TRACING_INNERPAGE':              return Object.assign({}, defaultState, {                  Curs:action.curs,                  Psizes:action.psizes              });        case 'BATCH_TRACING_MODAL':        return Object.assign({}, defaultState, {          modalflag:action.modalflag,          modaltype:action.modaltype        });        case 'BATCH_TRACING_CODE':        return Object.assign({}, defaultState, {          codeflag:action.modalflag        });        case 'BATCH_TRACING_MODAL_DETAILS':        return Object.assign({}, defaultState, {          modalflagDetails:action.modalflagDetails,          modaltype:action.modaltype        });        case 'BATCH_TRACING_DEFAULTFIELD':        return Object.assign({}, defaultState, {fields: fields});        case 'BATCH_TRACING_TREE_DATAs':        return Object.assign({}, defaultState, {          TreeD:action.tree        });        case 'BATCH_TRACING_SLIDEID':        return Object.assign({}, defaultState, {          slideID:action.num,          slideName:action.slideName,          slideparentID:action.slideparentID        });        case 'BATCH_TRACING_PARENTID':        return Object.assign({}, defaultState, {          parentID:action.parentid,          modifyID:action.modifyid        });        case 'BATCH_TRACING_CHOOSEPAGE':        return Object.assign({}, defaultState, {          chooseCUR:action.chooseCUR,          chooseSIZE:action.chooseSIZE        });    }    return defaultState;  },  action: (dispatch) => {    return {      superiorName:(parent) => {  //点击左边树的数据        dispatch({          type: "BATCH_TRACING_SUPERIOR_NAME",          Name:parent.name,          parentid:parent.parentID,          pID:parent.parentLeftID        });      },    //    查询      Alldatas: ( page ) => {  //进入页面的列表数据        IO.batchTracing.listByPagedata(page).then((res) => {          const data=res.data.rows||[];          const total=res.data.total;          const dataAll = data.map((item) => {            if(item.stauts===0) {              return Object.assign({}, item, {                stauts: '正常'              });            }else if(item.stauts===1) {              return Object.assign({}, item, {                stauts: '禁用'              });            }else {              return item;            }          });          // if(dataAll && dataAll.length > 0) {          //     dataAll.forEach((item) => {          //       item.childData = [];          //     });          // }          dispatch({            type: "BATCH_TRACING_ALL_DATA",            dataAll,            total          });        }).catch();      },      queryAll: (req) => {  //筛选的列表数据        IO.batchTracing.listByPagedata(req).then((res) => {          const querytotal=res.data.total;          const data = res.data.rows;          const queryall = data.map((item) => {              if(item.stauts===0) {                return Object.assign({}, item, {                  stauts: '正常'                });              }else if(item.stauts===1) {                return Object.assign({}, item, {                  stauts: '禁用'                });              }else {                return item;              }            });            // if(queryall && queryall.length > 0) {            //     queryall.forEach((item) => {            //         item.childData = [];            //     });            // }          dispatch({            type: "BATCH_TRACING_QUERY_ALL",            queryall,            querytotal          });        }).catch();      },      uniqueCodeByBatch: (req) => {  //筛选的列表数据        IO.batchTracing.UniqueCodeByBatch(req).then((res) => {          const querytotal=res.total;          const data = res.data;          dispatch({            type: "BATCH_UNIQUE_CODE_ALL",            data,            querytotal          });        }).catch();      },       changeTable:(obj) => {  //分页页码          dispatch({            type: "BATCH_TRACING_CHANGE",            data:obj           });       },       page:(obj) => {  //分页页码          dispatch({            type: "BATCH_TRACING_PAGE",            cur:obj.current,            psize:obj.pageSize           });       },        innerpage:(obj) => {            dispatch({                type: "BATCH_TRACING_INNERPAGE",                curs:obj.current,                psizes:obj.pageSize            });        },       choosepage:(obj) => {         dispatch({           type: "BATCH_TRACING_CHOOSEPAGE",           chooseCUR:obj.current,           chooseSIZE:obj.pageSize         });       },      // 创建      defaultFields:(data) => {  //弹出框的数据        dispatch({          type: "BATCH_TRACING_DEFAULTFIELD",          data        });       },      modal:(obj) => {  //弹出框是否显示        dispatch({          type: "BATCH_TRACING_MODAL",          modalflag:obj.modalFlag,          modaltype:obj.modeltype        });      },      codemodal:(obj) => {  //弹出框是否显示        dispatch({          type: "BATCH_TRACING_CODE",          modalflag:obj.modalFlag        });      },      modalDetails:(obj) => {  //弹出框是否显示          dispatch({            type: "BATCH_TRACING_MODAL_DETAILS",            modalflagDetails:obj.modalFlagDetails,            modaltype:obj.modeltype          });        }    };  }};reducers.assemble = {batchtracingReducer: farmingModel.reducer};const action = farmingModel.action;const IOModel = {  TreeMOdel:IO.batchTracing.TreeData,  Delete:IO.batchTracing.deleteData,  Adddata:IO.batchTracing.Adddata,    Modifydata:IO.batchTracing.Modifydata,    getChildData: IO.batchTracing.getChildLevel,    addBatchGrade: IO.batchTracing.addBatchGrade,    deleteBatchGrade: IO.batchTracing.deleteBatchGrade,    saveBatchGradeQty: IO.batchTracing.saveBatchGradeQty,    addQrCode: IO.batchTracing.addQrCode,    getQrcodeList: IO.batchTracing.getQrcodeList};export {  action,  IO,  IOModel};