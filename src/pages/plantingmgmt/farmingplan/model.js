import reducers from '@/app/reducers';import {context, IO} from '@/app/io';//配置接口参数context.create('farmingPlan', {    listByPagedata: {        mockUrl: '/proxy/workPlan/listByPage',        url: '/workPlan/listByPage',        method: 'POST'    },    TreeData: {        mockUrl: '/proxy/resource/getChildsById',        url: '/resource/getChildsById',        rest: true    },    //获取计划周期状态    GetWorkPlanStatus: {        mockUrl: '/proxy/astWorkplanStatus/listAll',        url: '/astWorkplanStatus/listAll',        method: 'GET',        rest: true    },    //查询所有种植作物    GetAllCrop: {        mockUrl: '/proxy/astCrop/listAll',        url: '/astCrop/listAll',        method: 'GET',        rest: true    },    //查询所有基地    GetAllBase: {        mockUrl: '/proxy/astLand/baseByCompanyId',        url: '/astLand/baseByCompanyId',        method: 'GET',        rest: true    },    //查询种植作物下种植方案    GetSolutionByCropNo: {        mockUrl: '/proxy/workSolution/solutionByCropId',        url: '/workSolution/solutionByCropId',        method: 'POST'    },    //查询基地下所有未使用地块    GetUnuseLandInBase: {        // mockUrl: '/proxy/astLand/getLandsByBaseId/:id',        // url:'/astLand/getLandsByBaseId/:id',        // method: 'GET',        // rest: true        mockUrl: '/proxy/astBase/landNotInPlan',        url: '/astBase/landNotInPlan',        method: 'POST'    },    //创建农事计划    CreateWorkPlan: {        mockUrl: '/proxy/workPlan/makePlan',        url: '/workPlan/makePlan',        method: 'POST'    },    GetOne: {        mockUrl: '/proxy/workPlan/getById',        url: '/workPlan/getById',        method: 'POST'    },    getPhotoList: {        mockUrl: '/proxy/workPlan/getPicturesByTaskId',        url: '/workPlan/getPicturesByTaskId',        method: 'GET',        rest: true    },    //更新定值日期    updatePlanDate: {        mockUrl: '/proxy/workPlan/updatePlantingDate',        url: '/workPlan/updatePlantingDate',        method: 'POST'    },    //完成计划    completePlan: {        mockUrl: '/proxy/workPlan/updateWorkPlanStatus',        url: '/workPlan/updateWorkPlanStatus',        method: 'POST'    },    //终止计划    cancelPlan: {        mockUrl: '/proxy/workPlan/planTermination',        url: '/workPlan/planTermination',        method: 'POST'    },    //获取修改记录    listHistory: {        mockUrl: '/proxy/workTask/listHistory',        url: '/workTask/listHistory',        method: 'GET',        rest: true    },    //删除任务    deleteTask: {        mockUrl: '/proxy/workTask/updateDelete',        url: '/workTask/updateDelete',        method: 'POST'    },    //任务调整    adjustmentTask: {        mockUrl: '/proxy/workTask/updatePlanned',        url: '/workTask/updatePlanned',        method: 'POST'    },    //任务类型字典    GetAllWorkType: {        mockUrl: '/proxy/workType/listAll',        url: '/workType/listAll',        method: 'GET',        rest: true    },    //根据农事类型获取农事操作和农资    GetOptAndMatByType: {        mockUrl: '/proxy/workSolution/getWorkOperationAndAstMaterialByWorkTypeId',        url: '/workSolution/getWorkOperationAndAstMaterialByWorkTypeId',        method: 'GET',        rest: true    },    //添加临时任务    addTempTask: {        mockUrl: '/proxy/workTask/addTempTask',        url: '/workTask/addTempTask',        method: 'POST'    },    //用工请求    employmentReq: {        mockUrl: '/proxy/workPlan/addWorkTaskHireTask',        url: '/workPlan/addWorkTaskHireTask',        method: 'POST'    }});//封装页面reducer、actionconst farmingModel = {    reducer: (defaultState = {        EditData: {},        Alldate: [],        total: null,        parentname: null,        PID: null,        Psize: 10,        Cur: 1,        fields: {},        TreeD: [],        addflag: false,        modalflag: false,        modaltype: '',        parentID: null,        slideID: -1,        modifyID: null,        chooseCUR: 1,        chooseSIZE: 10,        workPlanStatusAll: [],        slideparentID: -1,        slideName: '农事计划',        Alldic: {},        AllCropDic: [],        AllBaseDic: [],        AllDate: [],        AllWorkTypeDic: [],        PlanData: {},        detailFields: {}    }, action) => {        const fields = action.data;        switch (action.type) {            case 'FARMPLAN_ALL_DATA': {                const Alldate = action.data;                const total = action.total;                return Object.assign({}, defaultState, {                    Alldate: Alldate,                    total: total,                    chooseflag: false                });            }            case 'FARMPLAN_QUERY_ALL': {                const queryAlls = action.queryall;                const querytotal = action.querytotal;                return Object.assign({}, defaultState, {                    Alldate: queryAlls,                    total: querytotal                });            }            case 'FARMPLAN_GET_ONE': {                const queryAlls = action.data;                return Object.assign({}, defaultState, {                    EditData: queryAlls                });            }            case 'FARMPLAN_MENU_ALL':                return Object.assign({}, defaultState, {                    Alldate: action.arr,                    total: action.num                    //chooseflag:true                });//        case 'FARMPLAN_CHOOSE_ALL': {//          const chooseAlls = action.chooseall;//          const choosetotal = action.choosetotal;//          return Object.assign({}, defaultState, {//            Alldate:chooseAlls,//            total:choosetotal//          });//        }            case 'FARMPLAN_SUPERIOR_NAME':                return Object.assign({}, defaultState, {                    parentname: action.Name                });            case 'FARMPLAN_RES_PAGE':                return Object.assign({}, defaultState, {                    Cur: action.cur,                    Psize: action.psize                });            case 'FARMPLAN_MODAL':                return Object.assign({}, defaultState, {                    modalflag: action.modalflag,                    modaltype: action.modaltype                });            case 'FARMPLAN_DEFAULTFIELD':                return Object.assign({}, defaultState, {fields: fields});            case 'FARMPLAN_TREE_DATAs':                return Object.assign({}, defaultState, {                    TreeD: action.tree                });            case 'FARMPLAN_SLIDEID':                return Object.assign({}, defaultState, {                    slideID: action.num,                    slideName: action.slideName,                    slideparentID: action.slideparentID                });            case 'FARMPLAN_PARENTID':                return Object.assign({}, defaultState, {                    parentID: action.parentid,                    modifyID: action.modifyid                });            case 'FARMPLAN_CHOOSEPAGE':                return Object.assign({}, defaultState, {                    chooseCUR: action.chooseCUR,                    chooseSIZE: action.chooseSIZE                });            case 'FARMPLAN_WORKPLAN_STATUS_DIC':                return Object.assign({}, defaultState, {                    workPlanStatusAll: action.dataAll                });            case 'PLAN_ALL_CROP_DIC': {                const dicAll = action.dataAll;                return Object.assign({}, defaultState, {                    AllCropDic: dicAll                });            }            case 'PLAN_ALL_BASE_DIC': {                const dicAll = action.dataAll;                return Object.assign({}, defaultState, {                    AllBaseDic: dicAll                });            }            case 'PLAN_GET_ONE': {                const planDetail = action.planList;                return Object.assign({}, defaultState, {                    PlanData: planDetail                });            }            case 'PLAN_ALL_WORKTYPE_DIC':                return Object.assign({}, defaultState, {                    AllWorkTypeDic: action.dataAll                });        }        return defaultState;    },    action: (dispatch) => {        return {            superiorName: (parent) => {  //点击左边树的数据                dispatch({                    type: "FARMPLAN_SUPERIOR_NAME",                    Name: parent.name,                    parentid: parent.parentID,                    pID: parent.parentLeftID                });            },            //    查询            Alldatas: (page) => {  //进入页面的列表数据                IO.farmingPlan.listByPagedata(page).then((res) => {                    const data = res.data.rows || [];                    const total = res.data.total;                    /*const dataAll = data.map((item) => {                      if(item.stauts===0) {                        return Object.assign({}, item, {                          stauts: '正常'                        });                      }else if(item.stauts===1) {                        return Object.assign({}, item, {                          stauts: '禁用'                        });                      }else {                        return item;                      }                    });*/                    dispatch({                        type: "FARMPLAN_ALL_DATA",                        data,                        total                    });                }).catch();            },            queryAll: (req) => {  //筛选的列表数据                IO.farmingPlan.listByPagedata(req).then((res) => {                    const querytotal = res.data.total;                    const data = res.data.rows || [];                    const queryall = data;                    /*const queryall = data.map((item) => {                        if(item.stauts===0) {                          return Object.assign({}, item, {                            stauts: '正常'                          });                        }else if(item.stauts===1) {                          return Object.assign({}, item, {                            stauts: '禁用'                          });                        }else {                          return item;                        }                      });*/                    dispatch({                        type: "FARMPLAN_QUERY_ALL",                        queryall,                        querytotal                    });                }).catch();            },            getWorkPlanStatus: () => {                IO.farmingPlan.GetWorkPlanStatus().then((res) => {                    const data = res.data || [];                    dispatch({                        type: "FARMPLAN_WORKPLAN_STATUS_DIC",                        dataAll: data                    });                });            },            page: (obj) => {  //分页页码                dispatch({                    type: "FARMPLAN_RES_PAGE",                    cur: obj.current,                    psize: obj.pageSize                });            },            choosepage: (obj) => {                dispatch({                    type: "FARMPLAN_CHOOSEPAGE",                    chooseCUR: obj.current,                    chooseSIZE: obj.pageSize                });            },            // 创建            defaultFields: (data) => {  //弹出框的数据                dispatch({                    type: "FARMPLAN_DEFAULTFIELD",                    data                });            },            modal: (obj) => {  //弹出框是否显示                dispatch({                    type: "FARMPLAN_MODAL",                    modalflag: obj.modalFlag,                    modaltype: obj.modeltype                });            },            AllDicPull: () => {                IO.farmingPlan.GetAllCrop({companyId: 1}).then((res) => {                    const data = res.data || [];                    dispatch({                        type: "PLAN_ALL_CROP_DIC",                        dataAll: data                    });                });                IO.farmingPlan.GetAllBase({companyId: 1}).then((res) => {                    const data = res.data || [];                    dispatch({                        type: "PLAN_ALL_BASE_DIC",                        dataAll: data                    });                });            },            AllWorkTypeQuery: () => {                IO.farmingPlan.GetAllWorkType().then((res) => {                    const data = res.data || {};                    dispatch({                        type: "PLAN_ALL_WORKTYPE_DIC",                        dataAll: data                    });                }).catch();            },            QueryByPlanId: async (req) => {  //获取当前方案的数据                await IO.farmingPlan.GetOne(req).then((res) => {                    if (res.success) {                        const data = res.data || {};                        dispatch({                            type: "PLAN_GET_ONE",                            planList: data                        });                    }                }).catch();            }        };    }};reducers.assemble = {farmingplanReducer: farmingModel.reducer};const action = farmingModel.action;const IOModel = {    TreeMOdel: IO.farmingPlan.TreeData,    GetPhotoList: IO.farmingPlan.getPhotoList,    GetSolutionByCropNo: IO.farmingPlan.GetSolutionByCropNo,    GetUnuseLandInBase: IO.farmingPlan.GetUnuseLandInBase,    CreateWorkPlan: IO.farmingPlan.CreateWorkPlan,    GetPlanDetail: IO.farmingPlan.GetOne,    GetAllCrop: IO.farmingPlan.GetAllCrop,    updatePlanDate: IO.farmingPlan.updatePlanDate,    completePlan: IO.farmingPlan.completePlan,    cancelPlan: IO.farmingPlan.cancelPlan,    listHistory: IO.farmingPlan.listHistory,    deleteTask: IO.farmingPlan.deleteTask,    adjustmentTask: IO.farmingPlan.adjustmentTask,    getOptAndMatByType: IO.farmingPlan.GetOptAndMatByType,    addTempTask: IO.farmingPlan.addTempTask,    employmentReq: IO.farmingPlan.employmentReq};const PlanIOModel = {    getOptAndMatByType: IO.farmingPlan.GetOptAndMatByType};export {    action,    IO,    IOModel,    PlanIOModel};