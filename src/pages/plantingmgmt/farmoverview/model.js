import reducers from '@/app/reducers';import {context, IO} from '@/app/io';//配置接口参数context.create('analyze', {  AllCountDatas: {        mockUrl: '/proxy/workTask/getCountInfo',        url: '/workTask/getCountInfo',        method: 'POST'    },  waterBarDatas: {        mockUrl: '/proxy/workTask/getWateringControlPlan',        url: '/workTask/getWateringControlPlan',        method: 'POST'    },  waterTableDatas: {        mockUrl: '/proxy/workTask/countWatering',        url: '/workTask/countWatering',        method: 'POST'    },  feitilizerBarDatas: {        mockUrl: '/proxy/workTask/getFertilizerPlanCount',        url: '/workTask/getFertilizerPlanCount',        method: 'POST'    },  feitilizerTableDatas: {        mockUrl: '/proxy/workTask/countFertilizer',        url: '/workTask/countFertilizer',        method: 'POST'    },  proctectionTableDatas: {        mockUrl: '/proxy/workTask/searchProtectiom',        url: '/workTask/searchProtectiom',        method: 'POST'    },  gardeningTableDatas: {        mockUrl: '/proxy/workTask/searchGardening',        url: '/workTask/searchGardening',        method: 'POST'    },    GetOne: {        mockUrl: '../../../mock/farming/analyze.json',        method: 'GET',        rest: true    },    GetOneTest: {        mockUrl: '../../../mock/farming/analyzeOther.json',        method: 'GET',        rest: true    },  GetLandByBaseId: {    mockUrl: '/proxy/astLand/getLandsByBaseId/:baseId',    url:'/astLand/getLandsByBaseId/:baseId',    method: 'GET',    rest: true  },  GetAllCrops: {    mockUrl: '/proxy/astCrop/listAll',    url:'/astCrop/listAll',    method: 'GET'  }});//封装页面reducer、actionconst farmingModel = {    reducer: (defaultState = {        AllCountdata:[],        Alldate: [],        Alldic: {},        total: null,        parentname: null,        PID: null,        Psize: 10,        Cur: 1,        fields: {},        TreeD: [],        addflag: false,        modaltype: '',        parentID: null,        slideID: -1,        modifyID: null,        chooseCUR: 1,        chooseSIZE: 10,        slideparentID: -1,        slideName: '分析'    }, action) => {        const fields = action.data;        switch (action.type) {            case 'ANALYZE_ALL_COUNT_DATA': {                const Alldate = action.data;                return Object.assign({}, defaultState, {                    AllCountdata: Alldate,                    chooseflag: false                });            }            case 'ANALYZE_QUERY_ALL': {                const queryAlls = action.data;                const querytotal = action.querytotal;                return Object.assign({}, defaultState, {                    Alldate: queryAlls,                    total: querytotal                });            }            case 'ANALYZE_MENU_ALL':                return Object.assign({}, defaultState, {                    Alldate: action.arr,                    total: action.num                    //chooseflag:true                });            case 'ANALYZE_SUPERIOR_NAME':                return Object.assign({}, defaultState, {                    parentname: action.Name                });            case 'ANALYZE_RES_PAGE':                return Object.assign({}, defaultState, {                    Cur: action.cur,                    Psize: action.psize                });            case 'ANALYZE_DEFAULTFIELD':                return Object.assign({}, defaultState, {fields: fields});            case 'ANALYZE_TREE_DATAs':                return Object.assign({}, defaultState, {                    TreeD: action.tree                });            case 'ANALYZE_PARENTID':                return Object.assign({}, defaultState, {                    parentID: action.parentid,                    modifyID: action.modifyid                });            case 'ANALYZE_CHOOSEPAGE':                return Object.assign({}, defaultState, {                    chooseCUR: action.chooseCUR,                    chooseSIZE: action.chooseSIZE                });        }        return defaultState;    },    action: (dispatch) => {        return {            superiorName: (parent) => {  //点击左边树的数据                dispatch({                    type: "ANALYZE_SUPERIOR_NAME",                    Name: parent.name,                    parentid: parent.parentID,                    pID: parent.parentLeftID                });            },            //    查询          allCountDatas: (page) => {  //进入页面的列表数据                page.companyId = 1;                IO.analyze.AllCountDatas(page).then((res) => {                    const data1 = res.data || [];                    const data = data1.map((item) => {                      if(item.code === 'protection') {                        item.title='';                        item.titleTwo='植保次数';                      }else if(item.code === 'watering') {                        item.title='灌溉量';                        item.titleTwo='灌溉次数';                      }else if(item.code === 'fertilizer') {                        item.title='施肥量';                        item.titleTwo='施肥次数';                      }else if(item.code === 'gardening') {                        item.title='';                        item.titleTwo='园艺次数';                      }                      return item;                    });                    dispatch({                        type: "ANALYZE_ALL_COUNT_DATA",                        data                    });                }).catch();            },            queryAll: (req) => {  //筛选的列表数据                req.companyId = 1;                req.userId = 1;                req.desc = 0;                req.field = "name";                IO.analyze.listByPagedata(req).then((res) => {                    const querytotal = res.data.total;                    const data = res.data.rows;                    dispatch({                        type: "ANALYZE_QUERY_ALL",                        data,                        querytotal                    });                }).catch();            },            page: (obj) => {  //分页页码                dispatch({                    type: "ANALYZE_RES_PAGE",                    cur: obj.current,                    psize: obj.pageSize                });            },            choosepage: (obj) => {                dispatch({                    type: "ANALYZE_CHOOSEPAGE",                    chooseCUR: obj.current,                    chooseSIZE: obj.pageSize                });            }        };    }};reducers.assemble = {farmoverviewReducer: farmingModel.reducer};const action = farmingModel.action;const IOModel = {    GetOne: IO.analyze.GetOne,    GetOneTest: IO.analyze.GetOneTest,  AllCountDatas: IO.analyze.AllCountDatas,  GetLandByBaseId: IO.analyze.GetLandByBaseId,  GetAllCrops: IO.analyze.GetAllCrops,  waterBarDatas: IO.analyze.waterBarDatas,  waterTableDatas: IO.analyze.waterTableDatas,  feitilizerBarDatas: IO.analyze.feitilizerBarDatas,  feitilizerTableDatas: IO.analyze.feitilizerTableDatas,  proctectionTableDatas: IO.analyze.proctectionTableDatas,  gardeningTableDatas: IO.analyze.gardeningTableDatas};export {    action,    IO,    IOModel};