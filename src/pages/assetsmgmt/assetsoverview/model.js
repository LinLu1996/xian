import reducers from '@/app/reducers';import {context, IO} from '@/app/io';import moment from "moment";//配置接口参数context.create('assetsoverview', {    listByPagedata: {        mockUrl: '/proxy/reportResource/getResourceReport',        url: '/reportResource/getResourceReport',        method: 'POST'    },    zzz: {        mockUrl: '/proxy/reportResource/getYieldReport',        url: '/reportResource/getYieldReport',        method: 'POST'    },    GetLandByBaseId: {        mockUrl: '/proxy/astLand/getLandsByBaseId/:baseId',        url: '/astLand/getLandsByBaseId/:baseId',        method: 'GET',        rest: true    },    //查询所有种植作物    GetAllCrop: {        mockUrl: '/proxy/astCrop/listAll',        url: '/astCrop/listAll',        method: 'GET'    },    GetOne: {        mockUrl: '/proxy/astBase/getById/:id',        url: '/astBase/getById/:id',        method: 'GET',        rest: true    },    GetList: {        mockUrl: '../../../mock/farming/assetsoverview.json',        method: 'GET',        rest: true    },    TreeData: {        mockUrl: '',        rest: true    },    GetLandsByBaseId:{        mockUrl:'/proxy/astLand/getLandsByBaseId/:baseId',        url:'/astLand/getLandsByBaseId/:baseId',        method: 'GET',        rest: true    },    GetCrops:{        mockUrl:'/proxy/astCrop/getAll',        url:'/astCrop/getAll',        method: 'GET',        rest: true    },    GetResourceDetailsByBaseAndCrop:{        mockUrl:'/proxy/reportResource/getResourceDetailsByBaseAndCrop',        url:'/reportResource/getResourceDetailsByBaseAndCrop',        method: 'GET',        rest: true    },    getResourceReportLand: {        mockUrl:'/proxy/reportResource/getResourceReportLand',        url:'/reportResource/getResourceReportLand',        method: 'POST'    },    getResourceReportCrop: {        mockUrl:'/proxy/reportResource/getResourceReportCrop',        url:'/reportResource/getResourceReportCrop',        method: 'POST'    },    getResourceReportDetail: {        mockUrl:'/proxy/reportResource/getResourceReportDetail',        url:'/reportResource/getResourceReportDetail',        method: 'POST'    },    getResourceReportType: {        mockUrl:'/proxy/reportResource/getResourceReportType',        url:'/reportResource/getResourceReportType',        method: 'POST'    }});//封装页面reducer、actionconst farmingModel = {    reducer: (defaultState = {        EditData: {},        Alldate: [],        ListData: [],        used: '',        free: '',        category: [],        crop: [],        landAndArea: [],        landAndAreaTotal: null,        landAndAreaCur: 1,        cropAndYield: [],        cropAndYieldTotal: null,        cropAndYieldCur: 1,        total: null,        gradeYield: [],        cropYield: [],        cropList: [],        gradeColoumn: {},        parentname: null,        PID: null,        Psize: 10,        Cur: 1,        fields: {},        TreeD: [],        addflag: false,        modalflag: false,        modaltype: '',        parentID: null,        slideID: -1,        modifyID: null,        chooseCUR: 1,        chooseSIZE: 10,        slideparentID: -1,        slideName: '资产概况'    }, action) => {        const fields = action.data;        switch (action.type) {            case 'ASSET_ALL_DATA': {                const Alldate = action.data;                const total = action.total;                const gradeYield = action.gradeYield;                const cropYield = action.cropYield;                const used = action.used;                const free = action.free;                const category = action.category;                const crop = action.crop;                const landAndArea = action.landAndArea;                const landAndAreaTotal = action.landAndAreaTotal;                const cropAndYield = action.cropAndYield;                const cropAndYieldTotal = action.cropAndYieldTotal;                const gradeColoumn = {};                gradeColoumn[defaultState.Cur] = action.gradeColoumn1;                const cropList = action.cropList;                return Object.assign({}, defaultState, {                    Alldate: Alldate,                    total: total,                    gradeYield: gradeYield,                    cropYield: cropYield,                    gradeColoumn: gradeColoumn,                    cropList: cropList,                    chooseflag: false,                    used: used,                    free: free,                    category:category,                    crop:crop,                    landAndArea:landAndArea,                    landAndAreaTotal: landAndAreaTotal,                    cropAndYield: cropAndYield,                    cropAndYieldTotal: cropAndYieldTotal                });            }            case 'LIST_DATA': {                const data = action.data;                return Object.assign({}, defaultState, {                    ListData: data                });            }            case 'SEARCH_DATA': {                const queryAlls = action.data;                const querytotal = action.querytotal;                return Object.assign({},defaultState,{                    Alldate: queryAlls,                    total: querytotal                });            }            case 'ASSET_QUERY_ALL': {                const queryAlls = action.data;                const querytotal = action.querytotal;                const gradeYield = action.gradeYield;                const cropYield = action.cropYield;                const used = action.used;                const free = action.free;                const category = action.category;                const crop = action.crop;                const landAndArea = action.landAndArea;                const landAndAreaTotal = action.landAndAreaTotal;                const cropAndYield = action.cropAndYield;                const cropAndYieldTotal = action.cropAndYieldTotal;                const gradeColoumn = {};                gradeColoumn[defaultState.Cur] = action.gradeColoumn1;                const cropList = action.cropList;                return Object.assign({}, defaultState, {                    Alldate: queryAlls,                    total: querytotal,                    gradeColoumn: gradeColoumn,                    cropList: cropList,                    gradeYield: gradeYield,                    cropYield: cropYield,                    used: used,                    free: free,                    category:category,                    crop:crop,                    landAndArea:landAndArea,                    landAndAreaTotal: landAndAreaTotal,                    cropAndYield: cropAndYield,                    cropAndYieldTotal: cropAndYieldTotal                });            }            case 'ASSET_QUERY_TYPE': {                const gradeYield = action.gradeYield;                const cropYield = action.cropYield;                const used = action.used;                const free = action.free;                const category = action.category;                const crop = action.crop;                const cropList = action.cropList;                return Object.assign({}, defaultState, {                    cropList: cropList,                    gradeYield: gradeYield,                    cropYield: cropYield,                    used: used,                    free: free,                    category:category,                    crop:crop                });            }            case 'ASSET_QUERY_DETAIL': {                const queryAlls = action.data;                const querytotal = action.querytotal;                return Object.assign({}, defaultState, {                    Alldate: queryAlls,                    total: querytotal                });            }            case 'ASSET_QUERY_CROP': {                const cropAndYield = action.cropAndYield;                const cropAndYieldTotal = action.cropAndYieldTotal;                return Object.assign({}, defaultState, {                    cropAndYield: cropAndYield,                    cropAndYieldTotal: cropAndYieldTotal                });            }            case 'ASSET_QUERY_LAND': {                const landAndArea = action.landAndArea;                const landAndAreaTotal = action.landAndAreaTotal;                return Object.assign({}, defaultState, {                    landAndArea: landAndArea,                    landAndAreaTotal: landAndAreaTotal                });            }            case 'ASSET_GET_ONE': {                const queryAlls = action.data;                return Object.assign({}, defaultState, {                    EditData: queryAlls                });            }            case 'ASSET_MENU_ALL':                return Object.assign({}, defaultState, {                    Alldate: action.arr,                    total: action.num                    //chooseflag:true                });//        case 'ASSET_CHOOSE_ALL': {//          const chooseAlls = action.chooseall;//          const choosetotal = action.choosetotal;//          return Object.assign({}, defaultState, {//            Alldate:chooseAlls,//            total:choosetotal//          });//        }            case 'ASSET_SUPERIOR_NAME':                return Object.assign({}, defaultState, {                    parentname: action.Name                });            case 'ASSET_RES_PAGE':                return Object.assign({}, defaultState, {                    Cur: action.cur,                    Psize: action.psize                });            case 'ASSET_RES_CROP_PAGE':                return Object.assign({}, defaultState, {                    cropAndYieldCur: action.cropAndYieldCur,                    Psize: action.psize                });            case 'ASSET_RES_LAND_PAGE':                return Object.assign({}, defaultState, {                    landAndAreaCur: action.landAndAreaCur,                    Psize: action.psize                });            case 'ASSET_MODAL':                return Object.assign({}, defaultState, {                    modalflag: action.modalflag,                    modaltype: action.modaltype                });            case 'ASSET_DEFAULTFIELD':                return Object.assign({}, defaultState, {fields: fields});            case 'ASSET_TREE_DATAs':                return Object.assign({}, defaultState, {                    TreeD: action.tree                });            case 'ASSET_SLIDEID':                return Object.assign({}, defaultState, {                    slideID: action.num,                    slideName: action.slideName,                    slideparentID: action.slideparentID                });            case 'ASSET_PARENTID':                return Object.assign({}, defaultState, {                    parentID: action.parentid,                    modifyID: action.modifyid                });            case 'ASSET_CHOOSEPAGE':                return Object.assign({}, defaultState, {                    chooseCUR: action.chooseCUR,                    chooseSIZE: action.chooseSIZE                });        }        return defaultState;    },    action: (dispatch) => {        return {            superiorName: (parent) => {  //点击左边树的数据                dispatch({                    type: "ASSET_SUPERIOR_NAME",                    Name: parent.name,                    parentid: parent.parentID,                    pID: parent.parentLeftID                });            },            //    查询            Alldatas: (page) => {  //进入页面的列表数据                IO.assetsoverview.listByPagedata(page).then((res) => {                    const data1 = res.data.details || [];                    const cropYield = res.data.cropYield || [];                    const gradeYield = res.data.gradeYield || [];                    const total = res.data.totalCount;                    const used = res.data.landUsed;                    const free = res.data.landFree;                    const category = res.data.category;                    const crop = res.data.crop;                    const landAndArea = res.data.landAndArea;                    const landAndAreaTotal = res.data.landAndAreaCount;                    const cropAndYield = res.data.cropAndYield;                    const cropAndYieldTotal = res.data.cropAndYieldCount;                    let gradeColoumn1 = [];                    const data = data1.map((item) => {                        if (item.plannedTime) {                            item.plannedTime = moment(item.plannedTime).format('YYYY-MM-DD');                        }                        if (item.plantingDate) {                            item.plantingDate = moment(item.plantingDate).format('YYYY-MM-DD');                        }                        gradeColoumn1.push(item.gradeName);                        return item;                    });                    gradeColoumn1 = Array.from(new Set(gradeColoumn1));                    const cropList = [];                    cropYield.map((item) => {                        const obj = {                            id: item.cropId,                            name: item.cropName                        };                        cropList.push(obj);                    });                    dispatch({                        type: "ASSET_ALL_DATA",                        data,                        total,                        gradeYield,                        cropYield,                        gradeColoumn1,                        cropList,                        used,                        free,                        category,                        crop,                        landAndArea,                        landAndAreaTotal,                        cropAndYield,                        cropAndYieldTotal                    });                }).catch();            },            Listdatas: () => {  //进入页面的列表数据;                IO.assetsoverview.GetList().then((res) => {                    dispatch({                        type: "LIST_DATA",                        data: res.data                    });                }).catch();            },            queryAll: (req) => {  //筛选的列表数据                IO.assetsoverview.listByPagedata(req).then((res) => {                    const data1 = res.data.details || [];                    const cropYield = res.data.cropYield || [];                    const gradeYield = res.data.gradeYield || [];                    const querytotal = res.data.totalCount;                    const used = res.data.landUsed;                    const free = res.data.landFree;                    const category = res.data.category;                    const crop = res.data.crop;                    const landAndArea = res.data.landAndArea;                    const landAndAreaTotal = res.data.landAndAreaCount;                    const cropAndYield = res.data.cropAndYield;                    const cropAndYieldTotal = res.data.cropAndYieldCount;                    let gradeColoumn1 = [];                    const data = data1.map((item) => {                        if (item.plannedTime) {                            item.plannedTime = moment(item.plannedTime).format('YYYY-MM-DD');                        }                        if (item.plantingDate) {                            item.plantingDate = moment(item.plantingDate).format('YYYY-MM-DD');                        }                        gradeColoumn1.push(item.gradeName);                        return item;                    });                    gradeColoumn1 = Array.from(new Set(gradeColoumn1));                    const cropList = [];                    cropYield.map((item) => {                        const obj = {                            id: item.cropId,                            name: item.cropName                        };                        cropList.push(obj);                    });                    dispatch({                        type: "ASSET_QUERY_ALL",                        data,                        querytotal,                        cropYield,                        gradeYield,                        gradeColoumn1,                        cropList,                        used,                        free,                        category,                        crop,                        landAndArea,                        landAndAreaTotal,                        cropAndYield,                        cropAndYieldTotal                    });                }).catch();            },            queryType: (req) => {                IO.assetsoverview.getResourceReportType(req).then((res) => {                    const cropYield = res.data.cropYield || [];                    const gradeYield = res.data.gradeYield || [];                    const used = res.data.landUsed;                    const free = res.data.landFree;                    const category = res.data.category;                    const crop = res.data.crop;                    const cropList = [];                    cropYield.map((item) => {                        const obj = {                            id: item.cropId,                            name: item.cropName                        };                        cropList.push(obj);                    });                    dispatch({                        type: "ASSET_QUERY_TYPE",                        cropYield,                        gradeYield,                        cropList,                        used,                        free,                        category,                        crop                    });                }).catch();            },            queryCrop: (req) => {                IO.assetsoverview.getResourceReportCrop(req).then((res) => {                    const cropAndYield = res.data.cropAndYield;                    const cropAndYieldTotal = res.data.cropAndYieldCount;                    dispatch({                        type: "ASSET_QUERY_CROP",                        cropAndYield,                        cropAndYieldTotal                    });                }).catch();            },            queryLand: (req) => {                IO.assetsoverview.getResourceReportLand(req).then((res) => {                    const landAndArea = res.data.landAndArea;                    const landAndAreaTotal = res.data.landAndAreaCount;                    dispatch({                        type: "ASSET_QUERY_LAND",                        landAndArea,                        landAndAreaTotal                    });                }).catch();            },            queryDetail: (req) => {                IO.assetsoverview.getResourceReportDetail(req).then((res) => {                    const data1 = res.data.details || [];                    const querytotal = res.data.totalCount;                    const data = data1.map((item) => {                        if (item.plannedTime) {                            item.plannedTime = moment(item.plannedTime).format('YYYY-MM-DD');                        }                        if (item.plantingDate) {                            item.plantingDate = moment(item.plantingDate).format('YYYY-MM-DD');                        }                        return item;                    });                    dispatch({                        type: "ASSET_QUERY_DETAIL",                        data,                        querytotal                    });                }).catch();            },            queryData:(req) => {                IO.assetsoverview.GetResourceDetailsByBaseAndCrop(req).then((res) => {                    const querytotal = res.data.totalCount;                    const data = res.data.details.map((item) => {                        if (item.plantingDate) {                            item.plantingDate = moment(item.plantingDate).format('YYYY-MM-DD');                        }                        return item;                    });                    dispatch({                        type: "SEARCH_DATA",                        data,                        querytotal                    });                }).catch();            },            getOne: async (req) => {  //编辑单个时获取数据                const res = await IO.assetsoverview.GetOne(req);                const data = res.data;                if (data.stauts === 0) {                    data.stauts = '正常';                } else if (data.stauts === 1) {                    data.stauts = '禁用';                }                dispatch({                    type: "ASSET_GET_ONE",                    data                });            },            page: (obj) => {  //分页页码                dispatch({                    type: "ASSET_RES_PAGE",                    cur: obj.current,                    psize: obj.pageSize                });            },            cropPage: (obj) => {                dispatch({                    type: "ASSET_RES_CROP_PAGE",                    cropAndYieldCur: obj.current,                    psize: obj.pageSize                });            },            landPage: (obj) => {                dispatch({                    type: "ASSET_RES_LAND_PAGE",                    landAndAreaCur: obj.current,                    psize: obj.pageSize                });            },            choosepage: (obj) => {                dispatch({                    type: "ASSET_CHOOSEPAGE",                    chooseCUR: obj.current,                    chooseSIZE: obj.pageSize                });            },            // 创建            defaultFields: (data) => {  //弹出框的数据                dispatch({                    type: "ASSET_DEFAULTFIELD",                    data                });            },            modal: (obj) => {  //弹出框是否显示                dispatch({                    type: "ASSET_MODAL",                    modalflag: obj.modalFlag,                    modaltype: obj.modeltype                });            }        };    }};reducers.assemble = {assetProfileReducer: farmingModel.reducer};const action = farmingModel.action;const IOModel = {    listByPagedata: IO.assetsoverview.listByPagedata,    TreeMOdel: IO.assetsoverview.TreeData,    GetLandByBaseId: IO.assetsoverview.GetLandByBaseId,    GetAllCrop: IO.assetsoverview.GetAllCrop,    getResourceReport: IO.assetsoverview.getResourceReport,    getLandsByBaseId:IO.assetsoverview.GetLandsByBaseId,    getCrops:IO.assetsoverview.GetCrops,    queryData:IO.assetsoverview.GetResourceDetailsByBaseAndCrop};export {    action,    IO,    IOModel};