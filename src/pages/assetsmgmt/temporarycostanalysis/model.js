import reducers from '@/app/reducers';import {context, IO} from '@/app/io';//配置接口参数context.create('temporaryCostAnalysis', {    listByPagedata: {        mockUrl: 'proxy/workHireTask/getWorkHireTaskReport',        url: '/workHireTask/getWorkHireTaskReport',        method: 'POST'    },    getLandsByBaseId: {        mockUrl: 'proxy/astLand/getLandsByBaseId/:baseId',        url: '/astLand/getLandsByBaseId/:baseId',        method: 'GET',        rest: true    },    getWorkHireTaskByCodeReport: {        mockUrl: 'proxy/workHireTask/getWorkHireTaskByCodeReport',        url: '/workHireTask/getWorkHireTaskByCodeReport',        method: 'POST'    },    getByIdReport: {        mockUrl: 'proxy/workHireTask/getByIdReport/:id',        url: '/workHireTask/getByIdReport/:id',        method: 'GET',        rest: true    },    TreeData: {        mockUrl: '',        rest: true    }});//封装页面reducer、actionconst farmingModel = {    reducer: (defaultState = {        EditData: {},        Alldate: [],        allDuration: '',        allPay: '',        total: null,        parentname: null,        PID: null,        Psize: 10,        Cur: 1,        fields: {},        TreeD: [],        addflag: false,        modalflag: false,        modaltype: '',        parentID: null,        slideID: -1,        modifyID: null,        chooseCUR: 1,        chooseSIZE: 10,        slideparentID: -1,        slideName: '临时工成本分析'    }, action) => {        const fields = action.data;        switch (action.type) {            case 'TEM_COST_ALL_DATA': {                const Alldate = action.data;                const total = action.total;                const allDuration = action.allDuration;                const allPay = action.allPay;                return Object.assign({}, defaultState, {                    Alldate: Alldate,                    total: total,                    allDuration: allDuration,                    allPay: allPay,                    chooseflag: false                });            }            case 'TEM_COST_QUERY_ALL': {                const queryAlls = action.data;                const querytotal = action.querytotal;                const allDuration = action.allDuration;                const allPay = action.allPay;                return Object.assign({}, defaultState, {                    Alldate: queryAlls,                    total: querytotal,                    allDuration: allDuration,                    allPay: allPay                });            }            case 'TEM_COST_GET_ONE': {                const queryAlls = action.data;                return Object.assign({}, defaultState, {                    EditData: queryAlls                });            }            case 'TEM_COST_MENU_ALL':                return Object.assign({}, defaultState, {                    Alldate: action.arr,                    total: action.num                    //chooseflag:true                });//        case 'TEM_COST_CHOOSE_ALL': {//          const chooseAlls = action.chooseall;//          const choosetotal = action.choosetotal;//          return Object.assign({}, defaultState, {//            Alldate:chooseAlls,//            total:choosetotal//          });//        }            case 'TEM_COST_SUPERIOR_NAME':                return Object.assign({}, defaultState, {                    parentname: action.Name                });            case 'TEM_COST_RES_PAGE':                return Object.assign({}, defaultState, {                    Cur: action.cur,                    Psize: action.psize                });            case 'TEM_COST_MODAL':                return Object.assign({}, defaultState, {                    modalflag: action.modalflag,                    modaltype: action.modaltype                });            case 'TEM_COST_DEFAULTFIELD':                return Object.assign({}, defaultState, {fields: fields});            case 'TEM_COST_TREE_DATAs':                return Object.assign({}, defaultState, {                    TreeD: action.tree                });            case 'TEM_COST_SLIDEID':                return Object.assign({}, defaultState, {                    slideID: action.num,                    slideName: action.slideName,                    slideparentID: action.slideparentID                });            case 'TEM_COST_PARENTID':                return Object.assign({}, defaultState, {                    parentID: action.parentid,                    modifyID: action.modifyid                });            case 'TEM_COST_CHOOSEPAGE':                return Object.assign({}, defaultState, {                    chooseCUR: action.chooseCUR,                    chooseSIZE: action.chooseSIZE                });        }        return defaultState;    },    action: (dispatch) => {        return {            superiorName: (parent) => {  //点击左边树的数据                dispatch({                    type: "TEM_COST_SUPERIOR_NAME",                    Name: parent.name,                    parentid: parent.parentID,                    pID: parent.parentLeftID                });            },            //    查询            Alldatas: (page) => {  //进入页面的列表数据                page.companyId = 1;                IO.temporaryCostAnalysis.listByPagedata(page).then((res) => {                    const data = res.data.rows || [];                    const total = res.data.total;                    const allDuration = res.data.allDuration;                    const allPay = res.data.allPay;                    data.push({id: -1, qty: '总计', sumDuration: allDuration, sumPay: allPay});                    dispatch({                        type: "TEM_COST_ALL_DATA",                        data,                        total,                        allDuration,                        allPay                    });                }).catch();            },            queryAll: (req) => {  //筛选的列表数据                req.companyId = 1;                IO.temporaryCostAnalysis.listByPagedata(req).then((res) => {                    const querytotal = res.data.total;                    const data = res.data.rows;                    const allDuration = res.data.allDuration;                    const allPay = res.data.allPay;                    data.push({id: -1, qty: '总计', sumDuration: allDuration, sumPay: allPay});                    dispatch({                        type: "TEM_COST_QUERY_ALL",                        data,                        querytotal,                        allDuration,                        allPay                    });                }).catch();            },            getOne: async (req) => {  //编辑单个时获取数据                const res = await IO.temporaryCostAnalysis.GetOne(req);                const data = res.data;                if (data.stauts === 0) {                    data.stauts = '正常';                } else if (data.stauts === 1) {                    data.stauts = '禁用';                }                dispatch({                    type: "TEM_COST_GET_ONE",                    data                });            },            page: (obj) => {  //分页页码                dispatch({                    type: "TEM_COST_RES_PAGE",                    cur: obj.current,                    psize: obj.pageSize                });            },            choosepage: (obj) => {                dispatch({                    type: "TEM_COST_CHOOSEPAGE",                    chooseCUR: obj.current,                    chooseSIZE: obj.pageSize                });            },            // 创建            defaultFields: (data) => {  //弹出框的数据                dispatch({                    type: "TEM_COST_DEFAULTFIELD",                    data                });            },            modal: (obj) => {  //弹出框是否显示                dispatch({                    type: "TEM_COST_MODAL",                    modalflag: obj.modalFlag,                    modaltype: obj.modeltype                });            }        };    }};reducers.assemble = {temporarycostanalysisReducer: farmingModel.reducer};const action = farmingModel.action;const IOModel = {    listByPagedata: IO.temporaryCostAnalysis.listByPagedata,    TreeMOdel: IO.temporaryCostAnalysis.TreeData,    Delete: IO.temporaryCostAnalysis.deleteData,    Adddata: IO.temporaryCostAnalysis.Adddata,    Modifydata: IO.temporaryCostAnalysis.Modifydata,    CheckName: IO.temporaryCostAnalysis.CheckName,    getLandsByBaseId: IO.temporaryCostAnalysis.getLandsByBaseId,    getWorkHireTaskByCodeReport: IO.temporaryCostAnalysis.getWorkHireTaskByCodeReport,    getByIdReport:IO.temporaryCostAnalysis.getByIdReport};export {    action,    IO,    IOModel};