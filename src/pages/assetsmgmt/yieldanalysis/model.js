import reducers from '@/app/reducers';import {context, IO} from '@/app/io';import moment from "moment";//配置接口参数context.create('yieldAnalysis', {  listByPagedata: {   mockUrl: '/proxy/reportResource/getYieldReport',   url: '/reportResource/getYieldReport',   method: 'POST'  },  GetLandByBaseId: {    mockUrl: '/proxy/astLand/getLandsByBaseId/:baseId',    url:'/astLand/getLandsByBaseId/:baseId',    method: 'GET',    rest: true  },    GetLandsByBaseIdAndPlan: {        mockUrl: "/proxy/astLand/getLandsByBaseIdAndPlan/:baseId",        url: '/astLand/getLandsByBaseId/:baseId',        method: 'GET',        rest:true    },  //查询所有种植作物  GetAllCrop: {    mockUrl: '/proxy/astCrop/listAll',    url: '/astCrop/listAll',    method: 'GET'  },  GetOne: {      mockUrl: '/proxy/astBase/getById/:id',      url: '/astBase/getById/:id',      method: 'GET',      rest: true    },  TreeData: {    mockUrl: '',    rest: true  }});//封装页面reducer、actionconst farmingModel = {  reducer: (defaultState = {    EditData:{},    Alldate:[],    total:null,    gradeYield:[],    cropYield:[],    cropList:[],    gradeColoumn:{},    parentname:null,    PID:null,    Psize:10,    Cur:1,    fields:{},    TreeD:[],    addflag:false,    modalflag:false,    modaltype:'',    parentID:null,    slideID:-1,    modifyID:null,    chooseCUR:1,    chooseSIZE:10,    slideparentID:-1,    slideName:'基地'  }, action) => {    const fields = action.data;    switch (action.type) {      case 'YIELD_ALL_DATA': {        const Alldate = action.data;        const total = action.total;        const gradeYield = action.gradeYield;        const cropYield = action.cropYield;        const gradeColoumn = {};        gradeColoumn[defaultState.Cur] = action.gradeColoumn1;        const cropList = action.cropList;        return Object.assign({}, defaultState, {          Alldate:Alldate,          total:total,          gradeYield:gradeYield,          cropYield:cropYield,          gradeColoumn:gradeColoumn,          cropList:cropList,          chooseflag:false        });      }        case 'YIELD_QUERY_ALL': {          const queryAlls = action.data;          const querytotal = action.querytotal;          const gradeYield = action.gradeYield;          const cropYield = action.cropYield;          const gradeColoumn = {};          gradeColoumn[defaultState.Cur] = action.gradeColoumn1;          const cropList = action.cropList;          return Object.assign({}, defaultState, {            Alldate:queryAlls,            total:querytotal,            gradeColoumn:gradeColoumn,            cropList:cropList,            gradeYield:gradeYield,            cropYield:cropYield          });        }        case 'YIELD_GET_ONE': {          const queryAlls = action.data;          return Object.assign({}, defaultState, {            EditData:queryAlls          });        }        case 'YIELD_MENU_ALL':        return Object.assign({}, defaultState, {          Alldate:action.arr,          total:action.num          //chooseflag:true        });//        case 'YIELD_CHOOSE_ALL': {//          const chooseAlls = action.chooseall;//          const choosetotal = action.choosetotal;//          return Object.assign({}, defaultState, {//            Alldate:chooseAlls,//            total:choosetotal//          });//        }        case 'YIELD_SUPERIOR_NAME':        return Object.assign({}, defaultState, {          parentname:action.Name        });        case 'YIELD_RES_PAGE':        return Object.assign({}, defaultState, {          Cur:action.cur,          Psize:action.psize        });        case 'YIELD_MODAL':        return Object.assign({}, defaultState, {          modalflag:action.modalflag,          modaltype:action.modaltype        });        case 'YIELD_DEFAULTFIELD':        return Object.assign({}, defaultState, {fields: fields});        case 'YIELD_TREE_DATAs':        return Object.assign({}, defaultState, {          TreeD:action.tree        });        case 'YIELD_SLIDEID':        return Object.assign({}, defaultState, {          slideID:action.num,          slideName:action.slideName,          slideparentID:action.slideparentID        });        case 'YIELD_PARENTID':        return Object.assign({}, defaultState, {          parentID:action.parentid,          modifyID:action.modifyid        });        case 'YIELD_CHOOSEPAGE':        return Object.assign({}, defaultState, {          chooseCUR:action.chooseCUR,          chooseSIZE:action.chooseSIZE        });    }    return defaultState;  },  action: (dispatch) => {    return {      superiorName:(parent) => {  //点击左边树的数据        dispatch({          type: "YIELD_SUPERIOR_NAME",          Name:parent.name,          parentid:parent.parentID,          pID:parent.parentLeftID        });      },    //    查询      Alldatas: ( page ) => {  //进入页面的列表数据        page.companyId = 1;        page.userId = 1;        page.desc = 0;        page.field = "name";        IO.yieldAnalysis.listByPagedata(page).then((res) => {          const data1=res.data.details||[];          const cropYield=res.data.cropYield||[];          const gradeYield=res.data.gradeYield||[];          const total=res.data.totalCount;          let gradeColoumn1 = [];          const data = data1.map((item) => {            if(item.plannedTime) {              item.plannedTime = moment(item.plannedTime).format('YYYY-MM-DD');            }            if(item.plantingDate) {              item.plantingDate = moment(item.plantingDate).format('YYYY-MM-DD');            }              gradeColoumn1.splice(0,gradeColoumn1.length);              for(const index in item.gradeName) {                  gradeColoumn1.push(item.gradeName[index]);              }            return item;          });          gradeColoumn1 = Array.from(new Set(gradeColoumn1));          const cropList = [];          cropYield.map((item) => {            const obj = {              id: item.cropId,              name: item.cropName            };            cropList.push(obj);          });          dispatch({            type: "YIELD_ALL_DATA",            data,            total,            gradeYield,            cropYield,            gradeColoumn1,            cropList          });        }).catch();      },      queryAll: (req) => {  //筛选的列表数据        req.companyId = 1;        req.userId = 1;        req.desc = 0;        req.field = "name";        IO.yieldAnalysis.listByPagedata(req).then((res) => {          const data1=res.data.details||[];          const cropYield=res.data.cropYield||[];          const gradeYield=res.data.gradeYield||[];          const querytotal=res.data.totalCount;          let gradeColoumn1 = [];          const data = data1.map((item) => {            if(item.plannedTime) {              item.plannedTime = moment(item.plannedTime).format('YYYY-MM-DD');            }            if(item.plantingDate) {              item.plantingDate = moment(item.plantingDate).format('YYYY-MM-DD');            }              gradeColoumn1.splice(0,gradeColoumn1.length);              for(const index in item.gradeName) {                  gradeColoumn1.push(item.gradeName[index]);              }            return item;          });          gradeColoumn1 = Array.from(new Set(gradeColoumn1));          const cropList = [];          cropYield.map((item) => {            const obj = {              id: item.cropId,              name: item.cropName            };            cropList.push(obj);          });          dispatch({            type: "YIELD_QUERY_ALL",            data,            querytotal,            cropYield,            gradeYield,            gradeColoumn1,            cropList          });        }).catch();      },      getOne: async (req) => {  //编辑单个时获取数据          const res= await  IO.yieldAnalysis.GetOne(req);            const data = res.data;            if(data.stauts===0) {              data.stauts = '正常';            }else if(data.stauts===1) {              data.stauts = '禁用';            }            dispatch({              type: "YIELD_GET_ONE",              data            });        },       page:(obj) => {  //分页页码          dispatch({            type: "YIELD_RES_PAGE",            cur:obj.current,            psize:obj.pageSize           });       },       choosepage:(obj) => {         dispatch({           type: "YIELD_CHOOSEPAGE",           chooseCUR:obj.current,           chooseSIZE:obj.pageSize         });       },      // 创建      defaultFields:(data) => {  //弹出框的数据        dispatch({          type: "YIELD_DEFAULTFIELD",          data        });       },      modal:(obj) => {  //弹出框是否显示        dispatch({          type: "YIELD_MODAL",          modalflag:obj.modalFlag,          modaltype:obj.modeltype        });      }    };  }};reducers.assemble = {yieldAnalysisNewReducer: farmingModel.reducer};const action = farmingModel.action;const IOModel = {  listByPagedata:IO.yieldAnalysis.listByPagedata,  TreeMOdel:IO.yieldAnalysis.TreeData,  GetLandByBaseId:IO.yieldAnalysis.GetLandByBaseId,    GetLandsByBaseIdAndPlan:IO.yieldAnalysis.GetLandsByBaseIdAndPlan,  GetAllCrop:IO.yieldAnalysis.GetAllCrop};const YieIOModel = {    GetLandByBaseId:IO.yieldAnalysis.GetLandByBaseId,    GetLandsByBaseIdAndPlan:IO.yieldAnalysis.GetLandsByBaseIdAndPlan};export {  action,  IO,  IOModel,    YieIOModel};