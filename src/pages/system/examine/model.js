import reducers from '@/app/reducers';import {context, IO} from '@/app/io';//配置接口参数context.create('examine', {    listByPageData: {        mockUrl: '/proxy/register/empByPage',        url: '/register/empByPage',        method: 'POST'    },    getUserInfo: {        mockUrl: '/proxy/register/getUser',        url: '/register/getUser',        method: 'GET'    },    updateUserInfo: {        mockUrl: '/proxy/register/updateUser',        url: '/register/updateUser',        method: 'POST'    }});//封装页面reducer、actionconst farmingModel = {    reducer: (defaultState = {        dataList: [],        total: null,        PageSize: 10,        Current: 1,        fields: {},        modalFlag: false,        modalType: 0    }, action) => {        const fields = action.data;        switch (action.type) {            case 'EXAMINE_ALL_DATA': {                const data = action.data;                const total = action.total;                return Object.assign({}, defaultState, {                    dataList: data,                    total: total                });            }            case 'EXAMINE_RES_PAGE':                return Object.assign({}, defaultState, {                    Current: action.current,                    PageSize: action.pageSize                });            case 'EXAMINE_MODAL':                return Object.assign({}, defaultState, {                    modalFlag: action.modalFlag,                    modalType: action.modalType                });            case 'EXAMINE_DEFAULTFIELD':                return Object.assign({}, defaultState, {fields: fields});        }        return defaultState;    },    action: (dispatch) => {        return {            allData: (page) => { // 查询                IO.examine.listByPageData(page).then((res) => {                    const data = res.data.registerEmployees || [];                    const total = res.data.totalCount;                    dispatch({                        type: "EXAMINE_ALL_DATA",                        data,                        total                    });                }).catch();            },            page: (obj) => {  //分页页码                dispatch({                    type: "EXAMINE_RES_PAGE",                    current: obj.current,                    pageSize: obj.pageSize                });            },            // 创建            defaultFields: (data) => {  //弹出框的数据                dispatch({                    type: "EXAMINE_DEFAULTFIELD",                    data                });            },            modal: (obj) => {  //弹出框是否显示                dispatch({                    type: "EXAMINE_MODAL",                    modalFlag: obj.modalFlag,                    modalType: obj.modalType                });            }        };    }};reducers.assemble = {examineReducer: farmingModel.reducer};const action = farmingModel.action;const IOModel = {};export {    action,    IO,    IOModel};