import reducers from '@/app/reducers';import {context, IO} from '@/app/io';//配置接口参数context.create('farmingOperations', {  listByPagedata: {   mockUrl: '/proxy/workOperation/listByPage',   url: '/workOperation/listByPage',   method: 'POST'  },  Adddata: {    mockUrl: '/proxy/workOperation/add',    url: '/workOperation/add',    method: 'POST'  },  deleteData: {    mockUrl: '',    rest: true  },  GetOne: {    mockUrl: '/proxy/workOperation/getById/:id',    url: '/workOperation/getById/:id',    method: 'GET',    rest: true  },  Modifydata: {    mockUrl: '/proxy/workOperation/update',    url: '/workOperation/update',    method: 'POST'  },  GetAllWorkType: {    mockUrl: '/proxy/workOperation/getAllWorkType',    url: '/workOperation/getAllWorkType',    method: 'GET',    rest: true  },  GetAllBase: {      mockUrl: '/proxy/astBase/listAll',      url: '/astBase/listAll',      method: 'GET',      rest: true  },  CheckName: {        mockUrl: '/proxy/workOperation/checkNameUnique',        url: '/workOperation/checkNameUnique',        method: 'GET'      },  TreeData: {    mockUrl: '',    rest: true  }});//封装页面reducer、actionconst farmingModel = {  reducer: (defaultState = {    EditData: {},    AllWorkType:[],    AllBase:[],    Alldate:[],    total:null,    parentname:null,    PID:null,    Psize:10,    Cur:1,    fields:{},    TreeD:[],    addflag:false,    modalflag:false,    modaltype:'',    parentID:null,    slideID:-1,    modifyID:null,    chooseCUR:1,    chooseSIZE:10,    slideparentID:-1,    slideName:'农事操作'  }, action) => {    const fields = action.data;    switch (action.type) {      case 'FARMOPE_ALL_DATA': {        const Alldate = action.data;        const total = action.total;        return Object.assign({}, defaultState, {          Alldate:Alldate,          total:total,          chooseflag:false        });      }        case 'FARMOPE_QUERY_ALL': {          const queryAlls = action.data;          const querytotal = action.querytotal;          return Object.assign({}, defaultState, {            Alldate:queryAlls,            total:querytotal          });        }        case 'FARMOPE_GET_ALL_WORK_TYPE': {          const queryAlls = action.data;          return Object.assign({}, defaultState, {            AllWorkType:queryAlls          });        }        case 'FARMOPE_GET_ALL_BASE': {            const queryAlls = action.data;            return Object.assign({}, defaultState, {                AllBase:queryAlls            });        }        case 'FARMOPE_GET_ONE': {          const queryAlls = action.data;          return Object.assign({}, defaultState, {            EditData:queryAlls          });        }        case 'FARMOPE_MENU_ALL':        return Object.assign({}, defaultState, {          Alldate:action.arr,          total:action.num          //chooseflag:true        });//        case 'FARMOPE_CHOOSE_ALL': {//          const chooseAlls = action.chooseall;//          const choosetotal = action.choosetotal;//          return Object.assign({}, defaultState, {//            Alldate:chooseAlls,//            total:choosetotal//          });//        }        case 'FARMOPE_SUPERIOR_NAME':        return Object.assign({}, defaultState, {          parentname:action.Name        });        case 'FARMOPE_RES_PAGE':        return Object.assign({}, defaultState, {          Cur:action.cur,          Psize:action.psize        });        case 'FARMOPE_MODAL':        return Object.assign({}, defaultState, {          modalflag:action.modalflag,          modaltype:action.modaltype        });        case 'FARMOPE_DEFAULTFIELD':        return Object.assign({}, defaultState, {fields: fields});        case 'FARMOPE_TREE_DATAs':        return Object.assign({}, defaultState, {          TreeD:action.tree        });        case 'FARMOPE_SLIDEID':        return Object.assign({}, defaultState, {          slideID:action.num,          slideName:action.slideName,          slideparentID:action.slideparentID        });        case 'FARMOPE_PARENTID':        return Object.assign({}, defaultState, {          parentID:action.parentid,          modifyID:action.modifyid        });        case 'FARMOPE_CHOOSEPAGE':        return Object.assign({}, defaultState, {          chooseCUR:action.chooseCUR,          chooseSIZE:action.chooseSIZE        });    }    return defaultState;  },  action: (dispatch) => {      return {          superiorName:(parent) => {  //点击左边树的数据              dispatch({                  type: "FARMOPE_SUPERIOR_NAME",                  Name:parent.name,                  parentid:parent.parentID,                  pID:parent.parentLeftID              });          },          //    查询          Alldatas: ( page ) => {  //进入页面的列表数据              page.companyId = 1;              IO.farmingOperations.listByPagedata(page).then((res) => {                  const data=res.data.rows||[];                  const total=res.data.total;                  dispatch({                      type: "FARMOPE_ALL_DATA",                      data,                      total                  });              }).catch();          },          queryAll: (req) => {  //筛选的列表数据              req.companyId = 1;              IO.farmingOperations.listByPagedata(req).then((res) => {                  const querytotal=res.data.total;                  const data = res.data.rows;                  dispatch({                      type: "FARMOPE_QUERY_ALL",                      data,                      querytotal                  });              }).catch();          },          getAllWorkType: async () => {  //筛选的列表数据              const res = await IO.farmingOperations.GetAllWorkType();              const data = res.data||[];              dispatch({                  type: "FARMOPE_GET_ALL_WORK_TYPE",                  data              });          },          getAllBase: async () => {  //筛选的列表数据              const res = await IO.farmingOperations.GetAllBase();              const data = res.data||[];              dispatch({                  type: "FARMOPE_GET_ALL_BASE",                  data              });          },          getOne: async (req) => {  //编辑单个时获取数据              const res = await IO.farmingOperations.GetOne(req);              const data = res.data;              dispatch({                  type: "FARMOPE_GET_ONE",                  data              });          },          page:(obj) => {  //分页页码              dispatch({                  type: "FARMOPE_RES_PAGE",                  cur:obj.current,                  psize:obj.pageSize              });          },          choosepage:(obj) => {              dispatch({                  type: "FARMOPE_CHOOSEPAGE",                  chooseCUR:obj.current,                  chooseSIZE:obj.pageSize              });          },          // 创建          defaultFields:(data) => {  //弹出框的数据              dispatch({                  type: "FARMOPE_DEFAULTFIELD",                  data              });          },          modal:(obj) => {  //弹出框是否显示              dispatch({                  type: "FARMOPE_MODAL",                  modalflag:obj.modalFlag,                  modaltype:obj.modeltype              });          }      };  }};reducers.assemble = {farmingOperationsReducer: farmingModel.reducer};const action = farmingModel.action;const IOModel = {  TreeMOdel:IO.farmingOperations.TreeData,  Delete:IO.farmingOperations.deleteData,  Adddata:IO.farmingOperations.Adddata,  Modifydata:IO.farmingOperations.Modifydata,  GetWorkType:IO.farmingOperations.GetAllWorkType,  GetAllBase:IO.farmingOperations.GetAllBase,  GetOne:IO.farmingOperations.getOne,  CheckName:IO.farmingOperations.CheckName};const OperationIOModel = {  GetWorkType:IO.farmingOperations.GetAllWorkType,  GetAllBase:IO.farmingOperations.GetAllBase};export {  action,  IO,  IOModel,  OperationIOModel};