import reducers from '@/app/reducers';import {context, IO} from '@/app/io';//配置接口参数context.create('cropyielddata', {    listByPagedata: {        mockUrl: '/proxy/astCrop/listByPage',        url: '/astCrop/listByPage',        method: 'POST'    },    getAstCropReport: {        mockUrl: '/proxy/astCrop/getAstCropReport/:id',        url: '/astCrop/getAstCropReport/:id',        method: 'GET',        rest: true    },    updateAstCropReport: {        mockUrl: '/proxy/astCrop/updateAstCropReport',        url: '/astCrop/updateAstCropReport',        method: 'POST'    },    TreeData: {        mockUrl: '',        rest: true    }});//封装页面reducer、actionconst farmingModel = {    reducer: (defaultState = {        Data2: {},        Alldate: [],        Editdata: {},        EditGradedata: {},        total: null,        parentname: null,        PID: null,        Psize: 10,        Cur: 1,        fields: {},        TreeD: [],        addflag: false,        modalflag: false,        modaltype: '',        gradeModalFlag: false,        parentID: null,        slideID: -1,        modifyID: null,        chooseCUR: 1,        chooseSIZE: 10,        slideparentID: -1,        slideName: '资源',        gradeInGroupData: []    }, action) => {        const fields = action.data;        switch (action.type) {            case ' CY_DATA_ALL_DATA': {                const Alldate = action.data;                const total = action.total;                return Object.assign({}, defaultState, {                    Alldate: Alldate,                    total: total,                    chooseflag: false                });            }            case ' CY_DATA_QUERY_ALL': {                const queryAlls = action.queryall;                const querytotal = action.querytotal;                return Object.assign({}, defaultState, {                    Alldate: queryAlls,                    total: querytotal                });            }            case ' CY_DATA_GET_ONE': {                const data = action.data;                return Object.assign({}, defaultState, {                    Editdata: data                });            }            case ' CY_DATA_MENU_ALL':                return Object.assign({}, defaultState, {                    Alldate: action.arr,                    total: action.num                    //chooseflag:true                });            case ' CY_DATA_SUPERIOR_NAME':                return Object.assign({}, defaultState, {                    parentname: action.Name                });            case ' CY_DATA_RES_PAGE':                return Object.assign({}, defaultState, {                    Cur: action.cur,                    Psize: action.psize                });            case ' CY_DATA_CHANGE_DATA2':                return Object.assign({}, defaultState, {                    Data2: action.data                });            case ' CY_DATA_MODAL':                return Object.assign({}, defaultState, {                    modalflag: action.modalflag,                    modaltype: action.modaltype,                    gradeModalFlag: action.gradeModalFlag                });            case ' CY_DATA_DEFAULTFIELD':                return Object.assign({}, defaultState, {fields: fields});            case ' CY_DATA_TREE_DATAs':                return Object.assign({}, defaultState, {                    TreeD: action.tree                });            case ' CY_DATA_SLIDEID':                return Object.assign({}, defaultState, {                    slideID: action.num,                    slideName: action.slideName,                    slideparentID: action.slideparentID                });            case ' CY_DATA_PARENTID':                return Object.assign({}, defaultState, {                    parentID: action.parentid,                    modifyID: action.modifyid                });            case ' CY_DATA_CHOOSEPAGE':                return Object.assign({}, defaultState, {                    chooseCUR: action.chooseCUR,                    chooseSIZE: action.chooseSIZE                });            case 'GRADE_LIST_IN_GROUP':                return Object.assign({}, defaultState, {                    gradeInGroupData: action.data                });        }        return defaultState;    },    action: (dispatch) => {        return {            superiorName: (parent) => {  //点击左边树的数据                dispatch({                    type: " CY_DATA_SUPERIOR_NAME",                    Name: parent.name,                    parentid: parent.parentID,                    pID: parent.parentLeftID                });            },            //    查询            Alldatas: (page) => {  //进入页面的列表数据                IO.cropyielddata.listByPagedata(page).then((res) => {                    const data = res.data.rows || [];                    const total = res.data.total;                    dispatch({                        type: " CY_DATA_ALL_DATA",                        data,                        total                    });                }).catch();            },            queryAll: (req) => {  //筛选的列表数据                IO.cropyielddata.listByPagedata(req).then((res) => {                    const querytotal = res.data.total;                    const queryall = res.data.rows;                    dispatch({                        type: " CY_DATA_QUERY_ALL",                        queryall,                        querytotal                    });                }).catch();            },            page: (obj) => {  //分页页码                dispatch({                    type: " CY_DATA_RES_PAGE",                    cur: obj.current,                    psize: obj.pageSize                });            },            changeData2: (obj) => {  //子表格数据改变                dispatch({                    type: " CY_DATA_CHANGE_DATA2",                    data: obj                });            },            choosepage: (obj) => {                dispatch({                    type: " CY_DATA_CHOOSEPAGE",                    chooseCUR: obj.current,                    chooseSIZE: obj.pageSize                });            },            // 创建            defaultFields: (data) => {  //弹出框的数据                dispatch({                    type: " CY_DATA_DEFAULTFIELD",                    data                });            },            modal: (obj) => {  //弹出框是否显示                dispatch({                    type: " CY_DATA_MODAL",                    modalflag: obj.modalFlag,                    modaltype: obj.modeltype,                    gradeModalFlag: obj.gradeModalFlag                });            },            getOne: async (req) => {  //编辑单个时获取数据                const res = await IO.cropyielddata.GetOne(req);                const data = res.data;                if (data.stauts === 0) {                    data.stauts = '正常';                } else if (data.stauts === 1) {                    data.stauts = '禁用';                }                dispatch({                    type: " CY_DATA_GET_ONE",                    data                });            }        };    }};reducers.assemble = {cropyielddataReducer: farmingModel.reducer};const action = farmingModel.action;const IOModel = {    TreeMOdel: IO.cropyielddata.TreeData,    Modifydata: IO.cropyielddata.Modifydata,    getAstCropReport: IO.cropyielddata.getAstCropReport,    updateAstCropReport: IO.cropyielddata.updateAstCropReport};export {    action,    IO,    IOModel};