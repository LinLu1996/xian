import reducers from '@/app/reducers';import {context, IO} from '@/app/io';//配置接口参数context.create('programAdd', {    listCycleData: {  //根据作物id获取生长周期        mockUrl: '/proxy/astCrop/getById/:id',        url: '/astCrop/getById/:id',        method: 'GET',        rest: true    },    getBreedList: {  //作物名称模糊查询        mockUrl: '/proxy/astCrop/listAll',        url: '/astCrop/listAll',        method: 'GET'    },    getWorkSolution: {  //根据农事类型id查询农事操作和农资列表        mockUrl: '/proxy/workSolution/getWorkOperationAndAstMaterialByWorkTypeId',        url: '/workSolution/getWorkOperationAndAstMaterialByWorkTypeId',        method: 'GET'    },    GetOne: {        mockUrl: '/proxy/workSolution/getSolutions',        url: '/workSolution/getSolutions',        method: 'GET',        rest: true    },    getFirstLevelCrop: {        mockUrl: '/proxy/astCategory/listAll',        url: '/astCategory/listAll',        method: 'GET'    },    getSecondLevelCrop: {        mockUrl: '/proxy/astCategory/getCategoryByParentId',        url: '/astCategory/getCategoryByParentId',        method: 'GET'    },    getThirdLevelCrop: {        mockUrl: '/proxy/astCategory/getCropsByParentId',        url: '/astCategory/getCropsByParentId',        method: 'GET'    }});//封装页面reducer、actionconst farmingModel = {    reducer: (defaultState = {        nextFlag: false,        functionaryList1:[],//一级作物大类        crop1: '',        functionaryList2:[],//一级作物大类        crop2: '',        functionaryList3:[],//一级作物大类        crop3: '',        cycleList: [],   //生长周期        name: '',  //种植方案名称        record: {}, //作物信息        breedList: [], //作物列表        taskList: [],  //任务列表        deleteList: [],  //删除列表        operationList: [],  //农事操作下拉框        materialList: [],   //农资下拉框        type: 'week',  //周或者天（生长周期的）        modalflag: false,        modaltype: '',        editFlag:false,        oldPeriod:[],        periodList:[],        plan: {},        solutionData: {}    }, action) => {        switch (action.type) {            case 'PROGRAM_ADD_CYCLE_DURATION': {                const duration = action.duration;                return Object.assign({}, defaultState, {                    type: duration                });            }            case 'PROGRAM_ADD_CYCLE_DELETE_CYCLE': {                const cycleList = action.cycleList;                const data = Object.assign({}, defaultState, {                    cycleList: cycleList                });                return data;            }            case 'PROGRAM_ADD_CYCLE_SET_CYCLE': {                const cycleList = action.cycleList;                return Object.assign({}, defaultState, {                    cycleList: cycleList                });            }            case 'PROGRAM_ADD_MODAL': {                return Object.assign({}, defaultState, {                    modalflag: action.modalflag,                    modaltype: action.modaltype,                  editFlag: action.editFlag                });            }            case 'PROGRAM_OLD_PERIOD': {                return Object.assign({}, defaultState, {                  oldPeriod:action.oldPeriod                });            }            case 'PROGRAM_ADD_CYCLE_DATA': {                const cycleList = action.cycleList;                return Object.assign({}, defaultState, {                    cycleList: cycleList                });            }            case 'PROGRAM_ADD_BREED_DATA': {                const breedList = action.breedList;                return Object.assign({}, defaultState, {                    breedList: breedList                });            }            case 'PROGRAM_ADD_CYCLE_SET_TASK': {                const taskList = action.taskList;                return Object.assign({}, defaultState, {                    taskList: taskList                });            }            case 'PROGRAM_ADD_DEFAULTFIELD': {                const fields = action.workType;                return Object.assign({}, defaultState, {fields: fields});            }            case 'PROGRAM_ADD_WORK_OPERATION_DATA': {                const operationList = action.operationList;                const materialList = action.materialList;                return Object.assign({}, defaultState, {                    operationList: operationList,                    materialList: materialList                });            }            case 'PROGRAM_ADD_GET_ONE': {                const queryAlls = action.data;                return Object.assign({}, defaultState, {                    plan: queryAlls                });            }            case 'PROGRAM_ADD_NAME': {                const name = action.name;                return Object.assign({}, defaultState, {name: name});            }            case 'PROGRAM_ADD_CROP': {                const functionaryList2 = action.functionaryList2;                return Object.assign({}, defaultState, {functionaryList2: functionaryList2});            }            case 'PROGRAM_ADD_CROP1': {                const crop1 = action.value;                return Object.assign({}, defaultState, {crop1: crop1});            }            case 'PROGRAM_ADD_CROP2': {                const crop2 = action.value;                return Object.assign({}, defaultState, {crop2: crop2});            }            case 'PROGRAM_ADD_CROP3': {                const crop3 = action.value;                return Object.assign({}, defaultState, {crop3: crop3});            }            case 'PROGRAM_ADD_RECORD': {                const record = action.record;                return Object.assign({}, defaultState, {record: record});            }            case 'PROGRAM_ADD_LIST2': {                const record = action.record;                return Object.assign({}, defaultState, {functionaryList2: record});            }            case 'PROGRAM_ADD_LIST3': {                const record = action.record;                return Object.assign({}, defaultState, {functionaryList3: record});            }            case 'PROGRAM_SOLUTION': {                const record = action.record;                return Object.assign({}, defaultState, {solutionData: record});            }            case 'PROGRAM_ADD_DELETE_LIST': {                const deleteList = action.deleteList;                return Object.assign({}, defaultState, {deleteList: deleteList});            }            case 'PROGRAM_ADD_CROP_FIRST': {                const cropList = action.cropList;                return Object.assign({}, defaultState, {functionaryList1: cropList});            }            case 'PROGRAM_ADD_CROP_SECOND': {                const cropList = action.cropList;                return Object.assign({}, defaultState, {functionaryList2: cropList});            }            case 'PROGRAM_ADD_CROP_THIRD': {                const cropList = action.cropList;                return Object.assign({},defaultState, {functionaryList3: cropList});            }            case 'PROGRAM_UPDATE_PERIOD': {                const periodList = action.periodList;                return Object.assign({},defaultState, {periodList: periodList});            }            case 'PROGRAM_OLD_CROP_PERIOD': {                const oldPeriodList = action.oldPeriodList;                return Object.assign({},defaultState, {oldPeriodList: oldPeriodList});            }            case 'PROGRAM_NEXT_FLAG': {                const nextFlag = action.nextFlag;                return Object.assign({},defaultState, {nextFlag: nextFlag});            }        }        return defaultState;    },    action: (dispatch) => {        return {            getOne: async (req) => {  //编辑单个时获取数据                const res = await IO.programAdd.GetOne(req);                const data = res.data;                dispatch({                    type: "PROGRAM_ADD_GET_ONE",                    data                });            },            //    修改时间周期            setDuration: (duration) => {  //进入页面的列表数据                dispatch({                    type: "PROGRAM_ADD_CYCLE_DURATION",                    duration                });            },            //  修改种植方案名称            setName: (name) => {                dispatch({                    type: 'PROGRAM_ADD_NAME',                    name                });            },            setFunctionaryList: (functionaryList2) => {                dispatch({                    type: 'PROGRAM_ADD_CROP',                    functionaryList2                });            },            setCrop1: (value) => {                dispatch({                    type: 'PROGRAM_ADD_CROP1',                    value                });            },            setCrop2: (value) => {                dispatch({                    type: 'PROGRAM_ADD_CROP2',                    value                });            },            setCrop3: (value) => {                dispatch({                    type: 'PROGRAM_ADD_CROP3',                    value                });            },            // 修改作物信息            setRecord: (record) => {                dispatch({                    type: 'PROGRAM_ADD_RECORD',                    record                });            },            setFunctionaryList2: (record) => {                dispatch({                    type: 'PROGRAM_ADD_LIST2',                    record                });            },            setFunctionaryList3: (record) => {                dispatch({                    type: 'PROGRAM_ADD_LIST3',                    record                });            },            setSolution: (record) => {                dispatch({                    type: 'PROGRAM_SOLUTION',                    record                });            },            // 删除周期            deleteCycle: (cycleList) => {  //进入页面的列表数据                dispatch({                    type: "PROGRAM_ADD_CYCLE_DELETE_CYCLE",                    cycleList: Object.assign([], cycleList)                });            },            // 修改周期值            setCycleValue: (cycleList) => {  //进入页面的列表数据                dispatch({                    type: "PROGRAM_ADD_CYCLE_SET_CYCLE",                    cycleList: Object.assign([], cycleList)                });            },            allCycleList: (page) => {  //进入页面的列表数据                IO.programAdd.listCycleData(page).then((res) => {                    const list = res.data.astCropPeriods || [];                    const cycleList = [];                    if (list.length > 0) {                        for (let i = 0; i < list.length; i++) {                            list[i].duration = 0;                            cycleList.push(list[i]);                        }                    }                    dispatch({                        type: "PROGRAM_ADD_CYCLE_DATA",                        cycleList                    });                }).catch();            },            getBreedList: (page) => {  //进入页面的列表数据                page.companyId = 1;                page.userId = 1;                IO.programAdd.getBreedList(page).then((res) => {                    const breedList = res.data || [];                    dispatch({                        type: "PROGRAM_ADD_BREED_DATA",                        breedList                    });                }).catch();            },            getWorkSolution: (page) => {                page.userId = 1;                IO.programAdd.getWorkSolution(page).then((res) => {                    const operationList = res.data.workOperationList || [];                    const materialList = res.data.astMaterialList || [];                    dispatch({                        type: "PROGRAM_ADD_WORK_OPERATION_DATA",                        operationList,                        materialList                    });                }).catch();            },            getFirstLevelCrop: (req) => {                IO.programAdd.getFirstLevelCrop(req).then((res) => {                    const cropList = res.data || [];                    dispatch({                        type: "PROGRAM_ADD_CROP_FIRST",                        cropList                    });                }).catch();            },            getSecondLevelCrop: (req) => {                IO.programAdd.getSecondLevelCrop(req).then((res) => {                    const cropList = res.data || [];                    dispatch({                        type: "PROGRAM_ADD_CROP_SECOND",                        cropList                    });                }).catch();            },            getThirdLevelCrop: (req) => {                IO.programAdd.getThirdLevelCrop(req).then((res) => {                    const cropList = res.data || [];                    dispatch({                        type:"PROGRAM_ADD_CROP_THIRD",                        cropList                    });                }).catch();            },            updatePeriod: (data) => {  //弹出框的数据                dispatch({                    type: "PROGRAM_UPDATE_PERIOD",                  periodList:data                });            },            cropPeriod: (data) => {  //弹出框的数据                dispatch({                    type: "PROGRAM_OLD_CROP_PERIOD",                  oldPeriodList:data                });            },            isNext: (data) => {  //弹出框的数据                dispatch({                    type: "PROGRAM_NEXT_FLAG",                    nextFlag:data                });            },            defaultFields: (data) => {  //弹出框的数据                const workType = data;                dispatch({                    type: "PROGRAM_ADD_DEFAULTFIELD",                    workType                });            },            modal: (obj) => {  //弹出框是否显示                dispatch({                    type: "PROGRAM_ADD_MODAL",                    modalflag: obj.modalFlag,                    modaltype: obj.modeltype,                    editFlag:obj.editFlag                });            },            old: (obj) => {  //弹出框是否显示                dispatch({                    type: "PROGRAM_OLD_PERIOD",                    oldPeriod:obj.oldPeriod                });            },            //第二步逻辑            onChooseTaskList: (taskList) => {  //                dispatch({                    type: "PROGRAM_ADD_CYCLE_SET_TASK",                    taskList: Object.assign([], taskList)                });            },            onDeleteList: (deleteList) => {  //                dispatch({                    type: "PROGRAM_ADD_DELETE_LIST",                    deleteList: Object.assign([], deleteList)                });            }        };    }};reducers.assemble = {programAddReducer: farmingModel.reducer};const action = farmingModel.action;const IOModel = {    getBreedList: IO.programAdd.getBreedList,    listCycleData: IO.programAdd.listCycleData,    getWorkSolution: IO.programAdd.getWorkSolution,    GetOne:IO.programAdd.GetOne,    getFirstLevelCrop: IO.programAdd.getFirstLevelCrop};const ProgramAddIOModel = {    getBreedList: IO.programAdd.getBreedList,    getWorkSolution: IO.programAdd.getWorkSolution};export {    action,    IO,    IOModel,    ProgramAddIOModel};