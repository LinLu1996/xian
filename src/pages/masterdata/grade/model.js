import reducers from '@/app/reducers';import {context, IO} from '@/app/io';//配置接口参数context.create('cropsGrade', {  listByPagedata: {   mockUrl: '/proxy/astGradeGroup/listByPage',   url: '/astGradeGroup/listByPage',      method: 'POST'  },  Adddata: {    mockUrl: '/proxy/astGradeGroup/add',    url: '/astGradeGroup/add',    method: 'POST'  },  deleteData: {    mockUrl: '',    rest: true  },  Modifydata: {    mockUrl: '/proxy/astGradeGroup/update',    url: '/astGradeGroup/update',    method: 'POST'  },  CheckName: {    mockUrl: '/proxy/astGradeGroup/checkName',    url: '/astGradeGroup/checkName',    method: 'GET'  },  CheckGrade: {      mockUrl: '/proxy/astGrade/checkGrade',      url: '/astGrade/checkGrade',      method: 'GET'    },  TreeData: {    mockUrl: '',    rest: true  },  GetOne: {      mockUrl: '/proxy/astGradeGroup/getById/:id',      url: '/astGradeGroup/getById/:id',      method: 'GET',      rest: true  },  AddGradeData: {      mockUrl: '/proxy/astGrade/add',      url: '/astGrade/add',      method: 'POST'  },  GetOneGrade: {      mockUrl: '/proxy/astGrade/getById/:id',      url: '/astGrade/getById/:id',      method: 'GET',      rest: true  },    listAllGradeInGroup: {        mockUrl: '/proxy/astGrade/listInGroup',        url: '/astGrade/listInGroup',        method: 'GET'    },    ModifyGradeData: {        mockUrl: '/proxy/astGrade/update',        url: '/astGrade/update',        method: 'POST'    }});//封装页面reducer、actionconst farmingModel = {  reducer: (defaultState = {    Data2:{},    Alldate:[],    Editdata: {},    EditGradedata: {},    total:null,    parentname:null,    PID:null,    Psize:10,    Cur:1,    fields:{},    TreeD:[],    addflag:false,    modalflag:false,    modaltype:'',    gradeModalFlag: false,    parentID:null,    slideID:-1,    modifyID:null,    chooseCUR:1,    chooseSIZE:10,    slideparentID:-1,    slideName:'资源',    gradeInGroupData: []  }, action) => {    const fields = action.data;    switch (action.type) {      case 'CG_ALL_DATA': {        const Alldate = action.data;        const total = action.total;        return Object.assign({}, defaultState, {          Alldate:Alldate,          total:total,          chooseflag:false        });      }        case 'CG_QUERY_ALL': {          const queryAlls = action.queryall;          const querytotal = action.querytotal;          return Object.assign({}, defaultState, {            Alldate:queryAlls,            total:querytotal          });        }        case 'CG_GET_ONE': {            const data = action.data;            return Object.assign({}, defaultState, {                Editdata:data            });        }        case 'CG_GET_GRADE_ONE': {            const data = action.data;            return Object.assign({}, defaultState, {                EditGradedata:data            });        }        case 'CG_MENU_ALL':        return Object.assign({}, defaultState, {          Alldate:action.arr,          total:action.num          //chooseflag:true        });//        case 'CG_CHOOSE_ALL': {//          const chooseAlls = action.chooseall;//          const choosetotal = action.choosetotal;//          return Object.assign({}, defaultState, {//            Alldate:chooseAlls,//            total:choosetotal//          });//        }        case 'CG_SUPERIOR_NAME':        return Object.assign({}, defaultState, {          parentname:action.Name        });        case 'CG_RES_PAGE':        return Object.assign({}, defaultState, {          Cur:action.cur,          Psize:action.psize        });          case 'CG_CHANGE_DATA2':            return Object.assign({}, defaultState, {              Data2:action.data          });        case 'CG_MODAL':        return Object.assign({}, defaultState, {          modalflag:action.modalflag,          modaltype:action.modaltype,          gradeModalFlag: action.gradeModalFlag        });        case 'CG_DEFAULTFIELD':        return Object.assign({}, defaultState, {fields: fields});        case 'CG_TREE_DATAs':        return Object.assign({}, defaultState, {          TreeD:action.tree        });        case 'CG_SLIDEID':        return Object.assign({}, defaultState, {          slideID:action.num,          slideName:action.slideName,          slideparentID:action.slideparentID        });        case 'CG_PARENTID':        return Object.assign({}, defaultState, {          parentID:action.parentid,          modifyID:action.modifyid        });        case 'CG_CHOOSEPAGE':        return Object.assign({}, defaultState, {          chooseCUR:action.chooseCUR,          chooseSIZE:action.chooseSIZE        });        case 'GRADE_LIST_IN_GROUP':          return Object.assign({}, defaultState, {              gradeInGroupData: action.data          });    }    return defaultState;  },  action: (dispatch) => {    return {      superiorName:(parent) => {  //点击左边树的数据        dispatch({          type: "CG_SUPERIOR_NAME",          Name:parent.name,          parentid:parent.parentID,          pID:parent.parentLeftID        });      },    //    查询      Alldatas: ( page ) => {  //进入页面的列表数据        IO.cropsGrade.listByPagedata(page).then((res) => {          const data=res.data.rows||[];          const total=res.data.totalCount;          dispatch({            type: "CG_ALL_DATA",            data,            total          });        }).catch();      },      queryAll: (req) => {  //筛选的列表数据        IO.cropsGrade.listByPagedata(req).then((res) => {          const querytotal=res.data.totalCount;          const data = res.data.rows;          const queryall = data.map((item) => {              if(item.stauts===0) {                return Object.assign({}, item, {                  stautsShow: '正常'                });              }else if(item.stauts===1) {                return Object.assign({}, item, {                  stautsShow: '禁用'                });              }else {                return item;              }            });          dispatch({            type: "CG_QUERY_ALL",            queryall,            querytotal          });        }).catch();      },       page:(obj) => {  //分页页码          dispatch({            type: "CG_RES_PAGE",            cur:obj.current,            psize:obj.pageSize           });       },        changeData2:(obj) => {  //子表格数据改变            dispatch({                type: "CG_CHANGE_DATA2",                data:obj            });        },       choosepage:(obj) => {         dispatch({           type: "CG_CHOOSEPAGE",           chooseCUR:obj.current,           chooseSIZE:obj.pageSize         });       },      // 创建      defaultFields:(data) => {  //弹出框的数据        dispatch({          type: "CG_DEFAULTFIELD",          data        });       },      modal:(obj) => {  //弹出框是否显示        dispatch({          type: "CG_MODAL",          modalflag:obj.modalFlag,          modaltype:obj.modeltype,          gradeModalFlag: obj.gradeModalFlag        });      },      getOne: async (req) => {  //编辑单个时获取数据          const res= await  IO.cropsGrade.GetOne(req);          const data = res.data;          if(data.stauts===0) {              data.stauts = '正常';          }else if(data.stauts===1) {              data.stauts = '禁用';          }          dispatch({              type: "CG_GET_ONE",              data          });      },      getGradeOne: async (req) => {  //编辑单个时获取数据          const res= await  IO.cropsGrade.GetOneGrade(req);          const data = res.data;          if(data.stauts===0) {              data.stauts = '正常';          }else if(data.stauts===1) {              data.stauts = '禁用';          }          dispatch({              type: "CG_GET_GRADE_ONE",              data          });      },      listInGroup: async (req) => {        const res = await IO.cropsGrade.listAllGradeInGroup(req);        const data = res.data.map((item) => {            if(item.stauts===0) {                return Object.assign({}, item, {                    stautsShow: '正常'                });            }else if(item.stauts===1) {                return Object.assign({}, item, {                    stautsShow: '禁用'                });            }else {                return item;            }        });        dispatch({            type: "GRADE_LIST_IN_GROUP",            data        });      }    };  }};reducers.assemble = {cropGradeReducer: farmingModel.reducer};const action = farmingModel.action;const IOModel = {  TreeMOdel:IO.cropsGrade.TreeData,  Delete:IO.cropsGrade.deleteData,  Adddata:IO.cropsGrade.Adddata,  Modifydata:IO.cropsGrade.Modifydata,  AddGradeData: IO.cropsGrade.AddGradeData,  GetOneGrade: IO.cropsGrade.GetOneGrade,  ListInGroup: IO.cropsGrade.listAllGradeInGroup,  CheckName:IO.cropsGrade.CheckName,  CheckGrade:IO.cropsGrade.CheckGrade,  ModifyGradeData: IO.cropsGrade.ModifyGradeData};export {  action,  IO,  IOModel};