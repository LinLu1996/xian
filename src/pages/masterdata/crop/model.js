import reducers from '@/app/reducers';import {context, IO} from '@/app/io';//配置接口参数context.create('crops', {    listByPagedata: {        mockUrl: '/proxy/astCrop/listByPage',        url: '/astCrop/listByPage',        method: 'POST'    },    allUnit: {        mockUrl: '/proxy/astCrop/getAllUnit',        url: '/astCrop/getAllUnit',        method: 'GET'    },    allDosageUnit: {        mockUrl: '/proxy/astCrop/getAllDosageUnit',        url: '/astCrop/getAllDosageUnit',        method: 'GET'    },    allGrade: {        mockUrl: '/proxy/astGradeGroup/listAll',        url: '/astGradeGroup/listAll',        method: 'GET'    },    allPeriod: {        mockUrl: '/proxy/workPeriod/getAllPeriod',        url: '/workPeriod/getAllPeriod',        method: 'GET'    },    allCategory: {        mockUrl: '/proxy/astCategory/listAll',        url: '/astCategory/listAll',        method: 'GET'    },    getByCategoryId: {        mockUrl: '/proxy/astCategory/getCategoryByParentId',        url: '/astCategory/getCategoryByParentId',        method: 'GET'    },    getOne: {        mockUrl: '/proxy/astCrop/getById/:id',        url: '/astCrop/getById/:id',        method: 'GET',        rest: true    },    Adddata: {        mockUrl: '/proxy/astCrop/add',        url: '/astCrop/add',        method: 'POST'    },    deleteData: {        mockUrl: '',        rest: true    },    Modifydata: {        mockUrl: '/proxy/astCrop/update',        url: '/astCrop/update',        method: 'POST'    },    CheckName: {        mockUrl: '/proxy/astCrop/checkName',        url: '/astCrop/checkName',        method: 'GET'    },    TreeData: {        mockUrl: '',        rest: true    }});//封装页面reducer、actionconst farmingModel = {    reducer: (defaultState = {      addFlag: false,        editFlag: false,      oldPeriod: [],        Alldate: [],        total: null,        parentname: null,        PID: null,        Psize: 10,        Cur: 1,        fields: {},        fieldsTable: {},        TreeD: [],        addflag: false,        modalflag: false,        modaltype: '',        modalTableflag: false,        modalTableType: '',        parentID: null,        slideID: -1,        modifyID: null,        chooseCUR: 1,        chooseSIZE: 10,        slideparentID: -1,        slideName: '资源',        allUnit: [],        allDosageUnit: [],        allCategory: [],        allGrade: [],        allPeriod: [],        crop: {},        periods: {}    }, action) => {        const fields = action.data;        switch (action.type) {            case 'CROPS_ALL_DATA': {                const Alldate = action.data;                const total = action.total;                return Object.assign({}, defaultState, {                    Alldate: Alldate,                    total: total,                    chooseflag: false                });            }            case 'CROPS_QUERY_ALL': {                const queryAlls = action.data;                const querytotal = action.querytotal;                return Object.assign({}, defaultState, {                    Alldate: queryAlls,                    total: querytotal                });            }            case 'CROPS_GET_ONE': {                const crop = action.crop;                const periods = action.periods;                return Object.assign({}, defaultState, {                    crop: crop,                    periods: periods                });            }            case 'CROPS_GET_SELECT_DATA': {                const allUnit = action.allUnit;                const allDosageUnit = action.allDosageUnit;                const allCategory = action.allCategory;                const allGrade = action.allGrade;                const allPeriod = action.allPeriod;                return Object.assign({}, defaultState, {                    allUnit: allUnit,                    allDosageUnit: allDosageUnit,                    allCategory: allCategory,                    allGrade: allGrade,                    allPeriod: allPeriod                });            }            case 'CROPS_MENU_ALL':                return Object.assign({}, defaultState, {                    Alldate: action.arr,                    total: action.num                    //chooseflag:true                });//        case 'CROPS_CHOOSE_ALL': {//          const chooseAlls = action.chooseall;//          const choosetotal = action.choosetotal;//          return Object.assign({}, defaultState, {//            Alldate:chooseAlls,//            total:choosetotal//          });//        }            case 'CROPS_SUPERIOR_NAME':                return Object.assign({}, defaultState, {                    parentname: action.Name                });            case 'CROPS_RES_PAGE':                return Object.assign({}, defaultState, {                    Cur: action.cur,                    Psize: action.psize                });            case 'CROPS_MODAL':                return Object.assign({}, defaultState, {                    modalflag: action.modalflag,                    modaltype: action.modaltype,                    editFlag:action.editFlag,                  addFlag:action.addFlag                });            case 'CROPS_MODAL_TABLE':                return Object.assign({}, defaultState, {                    modalTableflag:action.modalTableflag,                    modalTableType:action.modalTableType                });            case 'CROPS_OLD_PERIOD':                return Object.assign({}, defaultState, {                  oldPeriod:action.oldPeriod                });            case 'CROPS_DEFAULTFIELD':                return Object.assign({}, defaultState, {fields: fields});            case 'CROPS_TABLEFIELD':                return Object.assign({}, defaultState, {fieldsTable: fields});            case 'CROPS_TREE_DATAs':                return Object.assign({}, defaultState, {                    TreeD: action.tree                });            case 'CROPS_SLIDEID':                return Object.assign({}, defaultState, {                    slideID: action.num,                    slideName: action.slideName,                    slideparentID: action.slideparentID                });            case 'CROPS_PARENTID':                return Object.assign({}, defaultState, {                    parentID: action.parentid,                    modifyID: action.modifyid                });            case 'CROPS_CHOOSEPAGE':                return Object.assign({}, defaultState, {                    chooseCUR: action.chooseCUR,                    chooseSIZE: action.chooseSIZE                });        }        return defaultState;    },    action: (dispatch) => {        return {            superiorName: (parent) => {  //点击左边树的数据                dispatch({                    type: "CROPS_SUPERIOR_NAME",                    Name: parent.name,                    parentid: parent.parentID,                    pID: parent.parentLeftID                });            },            getSelestData: async () => {   //获取下拉框                const allUnit = await IO.crops.allUnit();                const allDosageUnit = await IO.crops.allDosageUnit();                const allCategory = await IO.crops.allCategory({companyId: 1});                const allGrade = await IO.crops.allGrade({companyId: 1});                const allPeriod = await IO.crops.allPeriod({companyId: 1});                dispatch({                    type: "CROPS_GET_SELECT_DATA",                    allUnit,                    allDosageUnit,                    allCategory,                    allGrade,                    allPeriod                });            },            //    查询            Alldatas: (page) => {  //进入页面的列表数据                page.companyId = 1;                IO.crops.listByPagedata(page).then((res) => {                    const data = res.data.rows || [];                    const total = res.data.total;                    dispatch({                        type: "CROPS_ALL_DATA",                        data,                        total                    });                }).catch();            },            queryAll: (req) => {  //筛选的列表数据                req.companyId = 1;                IO.crops.listByPagedata(req).then((res) => {                    const querytotal = res.data.total;                    const data = res.data.rows;                    dispatch({                        type: "CROPS_QUERY_ALL",                        data,                        querytotal                    });                }).catch();            },            getOne: async (req) => {  //编辑单个时获取数据                const res = await IO.crops.getOne(req);                const crop = res.data.astCrop;                const periods = res.data.astCropPeriods;                if (crop.stauts === 0) {                    crop.stauts = '正常';                } else if (crop.stauts === 1) {                    crop.stauts = '禁用';                }                dispatch({                    type: "CROPS_GET_ONE",                    crop,                    periods                });            },            page: (obj) => {  //分页页码                dispatch({                    type: "CROPS_RES_PAGE",                    cur: obj.current,                    psize: obj.pageSize                });            },            choosepage: (obj) => {                dispatch({                    type: "CROPS_CHOOSEPAGE",                    chooseCUR: obj.current,                    chooseSIZE: obj.pageSize                });            },            // 创建            defaultFields: (data) => {  //弹出框的数据                dispatch({                    type: "CROPS_DEFAULTFIELD",                    data                });            },            // 创建            tableFields:(data) => {  //弹出框的数据                dispatch({                    type: "CROPS_TABLEFIELD",                    data                });            },            modal: (obj) => {  //弹出框是否显示                dispatch({                    type: "CROPS_MODAL",                    modalflag: obj.modalFlag,                    modaltype: obj.modeltype,                  editFlag: obj.editFlag,                  addFlag: obj.addFlag,                  oldPeriod:obj.oldPeriod                });            },            modalTable:(obj) => {  //弹出框是否显示                dispatch({                    type: "CROPS_MODAL_TABLE",                    modalTableflag:obj.modalFlag,                    modalTableType:obj.modeltype                });            },            old:(obj) => {  //弹出框是否显示                dispatch({                    type: "CROPS_OLD_PERIOD",                  oldPeriod:obj.oldPeriod                });            }        };    }};reducers.assemble = {cropReducer: farmingModel.reducer};const action = farmingModel.action;const IOModel = {    TreeMOdel: IO.crops.TreeData,    Delete: IO.crops.deleteData,    Adddata: IO.crops.Adddata,    Modifydata: IO.crops.Modifydata,    AllUnit: IO.crops.allUnit,    AllDosageUnit: IO.crops.allDosageUnit,    AllCategory: IO.crops.allCategory,    getByCategoryId: IO.crops.getByCategoryId,    AllGrade: IO.crops.allGrade,    AllPeriod: IO.crops.allPeriod,    GetOne: IO.crops.getOne,    CheckName: IO.crops.CheckName};const IOModelOut = {    getOne: IO.crops.getOne,    allUnit: IO.crops.allUnit,    allDosageUnit: IO.crops.allDosageUnit,    allCategory: IO.crops.allCategory,    CheckName: IO.crops.CheckName,    AllPeriod: IO.crops.allPeriod,    Modifydata: IO.crops.Modifydata};export {    action,    IO,    IOModel,    IOModelOut};